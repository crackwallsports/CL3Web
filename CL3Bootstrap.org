#+TITLE: CL 3 Bootstrap 
#+AUTHOR: Xt3

* Bootstrap
- Default Settings
  - font-size 14px
  - line-height 1.428
  - <p> margin-bottom 10px
- .sr-only : hide for all devices (- screen-reader)
- Size
  - xs (for phones)
  - sm (for tablets)
  - md (for desktops)
  - lg (for larger desktops)-

** Jumbotron
- <div> jumbotron

** Menus
- <ul> [<li>]+
- horizontal menu: list-inline 
* -----
* Package
#+BEGIN_SRC lisp :tangle yes
(in-package :cl-user)
(defpackage :xt3.web.bootstrap
  (:use :cl)
  (:export :bs-container
           :bs-btn
           :bs-icon-input
           :bs-input-btn
           :bs-row-col
           :bs-glyphicon
           :bs-carousel
           :bs-panel
           :bs-navbar
           :bs-nav
           :bs-nav-collapse
           :bs-breadcrumb))
(in-package :xt3.web.bootstrap)
#+END_SRC
* Help
** join-class
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun join-class (cll)
  "cll:str-list"
  `(:class ,(join-string-list
             (remove-if #'empty-str-p 
                        cll))))
  #+END_SRC
- Usage
  #+BEGIN_SRC lisp
;; Usage
(join-class '("someone" "me you"))
;;->
;; (:CLASS "someone me you")
  
  #+END_SRC
** empty-str-p
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun empty-str-p (str)
  (string= str ""))
  #+END_SRC
** empty-str-or
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun empty-str-or (str &key restr (add "") (prefix t))
  (cond
    ((string= str "") "")
    ((not (null restr)) restr)
    ((null prefix) (concat str add))
    (t (concat add str))))
  #+END_SRC
- Usage
  #+BEGIN_SRC lisp
(empty-str-or "a")
;;-> "a"
(empty-str-or "a" :restr "b")
;;-> "b"
(empty-str-or "a"  :add "-no")
;;-> "a-no"
(empty-str-or "a" :add "no-" :prefix t)
;;-> "no-a"  
  #+END_SRC
** to-list
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun to-list (item)
  (if (listp item) item (list item)))
  #+END_SRC
* -----
* Table
- style: (responsive striped bordered hover condensed)
- Contextual: (active success info warning danger)
- Impl
  #+BEGIN_SRC lisp
(defun bs-table (&key head body class atts style)
  "style:(responsive striped bordered hover condensed)"
  `(table (,@(join-class "table"
                         (nconc
                          (mapcar (lambda (s)
                                    (concat "table-" s))
                                  style)
                          class))
             ,@atts)
          (thead ()
                 (tr ()
                     ,@(loop for i in head
                          collect `(th () ,i))))
          (tbody ()
                 ,@(loop for r in body
                      collect (destructuring-bind (&key row atts) r
                                `(tr (,@atts)
                                     ,@(loop for d in row
                                          collect (destructuring-bind (&key col atts) d
                                                    (if (listp col)
                                                        `(td (,@atts) ,@col)
                                                        `(td (,@atts) ,col))))))))))



;; (bs-table :head '("one" "two" "three")
;;           :style '("responsive" "striped" "bordered" "hover" "condensed")
;;           :body '((:row ((:col "d1") (:col "d2") (:col "d3")))
;;                   (:row ((:col "d1") (:col "d2") (:col "d3"))
;;                    :atts (:class "cla"))
;;                   (:row ((:col ("d1" "d11")) (:col "d2") (:col "d3"))
;;                    :atts (:class "cla" :id "dd"))))
;;->
;; (TABLE (:CLASS "table")
;;        (THEAD NIL
;;               (TR NIL
;;                   (TH NIL "one")
;;                   (TH NIL "two")
;;                   (TH NIL "three")))
;;        (TBODY NIL
;;               (TR NIL
;;                (TD NIL "d1")
;;                (TD NIL "d2")
;;                (TD NIL "d3"))
;;               (TR
;;                (:CLASS "cla")
;;                (TD NIL "d1")
;;                (TD NIL "d2")
;;                (TD NIL "d3"))
;;               (TR
;;                (:CLASS "cla" :ID "dd")
;;                (TD NIL "d1" "d11")
;;                (TD NIL "d2")
;;                (TD NIL "d3"))))



  #+END_SRC

* Progress
#+BEGIN_SRC lisp
(defun bs-progress (bars &key class atts)
  `(div (:class ,(concat "progress" " " class) ,@atts)
        ,@bars))

(defun bs-progress-bar (items val &key sytle class)
  "val:N% sytle:(success info warning danger | striped)"
  `(div (:class ,(join-string-list
                 `("progress-bar"
                   ,@(loop for i in style
                        collect #?"progress-bar-${i}")
                   ,class))
               :sytle #?"width:${val}")
       ,@items))

#+END_SRC

* Pagination
#+BEGIN_SRC lisp
(defun bs-pagination (pages &key (class "") atts size)
  `(ul (:class ,(join-string-list
                 (remove-if #'empty-str-p 
                            `("pagination"
                              ,(if size
                                  #?"pagination-${size}"
                                  "")
                             ,class))))
       ,@(loop for i in pages
            collect (destructuring-bind (page &key (href "#") class atts) i
                      `(li (:class ,class ,@atts)
                           (a (:href ,href) ,@page))))))

;; (bs-pagination '(((1))
;;                  ((2) :class "active")
;;                  ((3) :class "disabled"))
;;                :size "lg"
;;                )
;;-> 
;; (UL
;;  (:CLASS "pagination pagination-lg")
;;  (LI
;;   (:CLASS NIL)
;;   (A (:HREF "#") 1))
;;  (LI
;;   (:CLASS "active")
;;   (A (:HREF "#") 2))
;;  (LI
;;   (:CLASS "disabled")
;;   (A (:HREF "#") 3)))
#+END_SRC

* Pager
#+BEGIN_SRC lisp
(defun bs-pager (&key prev next (class "") atts)
  `(ul (:class ,(join-string-list
                 (remove-if #'empty-str-p 
                            `("pager"
                             ,class))))
       (li (:class "previous")
           (a (:href ,(second prev)) ,(first prev)))
       (li (:class "next")
           (a (:href ,(second next)) ,(first next)))))

#+END_SRC

* ----- 以上需要重写
* Container
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun bs-container (items &key fluid (class "") atts)
  `(div (,@(join-class `(,(if fluid
                              "container-fluid"
                              "container")
                          ,class))
           ,@atts)
        ,@(to-list items)))
  #+END_SRC
- Usage
  #+BEGIN_SRC lisp
;; Usage
(bs-container '("hello"
                (h1 () "h1")
                (h3 () "h3"))
              :fluid t
              :class "one two")
;;-> 
;; (DIV
;;  (:CLASS "container-fluid one two")
;;  "hello"
;;  (H1 NIL "h1")
;;  (H3 NIL "h3"))
  #+END_SRC

* Button
- btn
  - (default primary success info warning danger link)
  - (lg md sm xs)
  - block
- active
- disabled

** btn
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun bs-btn (items &key (class "") atts (style "") (size "") (type "button"))
  "style:(default primary success info warning danger link)
   size:(lg md sm xs)
   type:(button submit)"
  `(button
    (:type ,type
           ,@(join-class `("btn"
                           ,(empty-str-or style :add "btn-")
                           ,(empty-str-or size :add "btn-")
                           ,class))
           ,@atts)
    ,@(to-list items)))
  #+END_SRC
- Usage
  #+BEGIN_SRC lisp
(bs-btn "button" :style "default")
;;-> 
;; (BUTTON (:TYPE "button" :CLASS "btn btn-default") "button")

(bs-btn '("button"
          (p () "btn")) :style "default" :size "sm")
;;-> 
;; (BUTTON
;;  (:TYPE "button"
;;         :CLASS "btn btn-default btn-sm")
;;  "button"
;;  (P NIL "btn"))

  
  #+END_SRC

** Groups
- <div> btn-group
  - (lg sm xs)
  - vertical
  - justified (For <button> must wrap each button in btn-group)
* Input group
** Icon+Input
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun bs-icon-input (icon id name &key (type "text") (ph name) reverse
(isize "30"))
  (let ((content `((span (:class "input-group-addon")
                         (i (:class ,#?"glyphicon glyphicon-${icon}")))
                   (input (:class "form-control" :id ,id :type ,type :name ,name :placeholder ,ph :size ,isize)))))
    (if reverse (setf content (nreverse content)))
    `(div (:class "input-group")
          ,@content)))
  #+END_SRC
** Input+Btn
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun bs-input-btn (id name title &key (type "text") (ph name) reverse (btn-style "") (isize "50"))
  (let ((content `((input (:class "form-control" :id ,id :type ,type :name ,name :placeholder ,ph :required "required" :size ,isize))
                   (div (:class "input-group-btn")
                        (button (:type "button"
                                       ,@(join-class `("btn"
                                                       ,(empty-str-or btn-style :add "btn-"))))
                                ,title)))))
    (if reverse (setf content (nreverse content)))
    `(div (:class "input-group")
          ,@content)))
  #+END_SRC
- Usage
  #+BEGIN_SRC lisp
(bs-input-btn "uemail" "uemail" "Subscribe"
               :type "email"
               :btn-style "danger"
               :ph "Email Address")
;;-> 
;; (DIV
;;  (:CLASS "input-group")
;;  (INPUT
;;   (:CLASS "form-control"
;;           :ID "uemail"
;;           :TYPE "email"
;;           :NAME "uemail"
;;           :PLACEHOLDER "Email Address"
;;           :REQUIRED "required"))
;;  (DIV
;;   (:CLASS "input-group-btn")
;;   (BUTTON
;;    (:TYPE "button"
;;           :CLASS "btn btn-danger")
;;    "Subscribe")))  
  #+END_SRC

* Grids
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun bs-row-col (items &key (class "") atts (w '("md" "xs" "sm" "lg")) )
  `(div (,@(join-class `("row" ,class)) ,@atts)
        ,@(loop for i in items
             collect (destructuring-bind (size content &key (class "") atts) i
                       (let ((att
                              (join-string-list
                               (mapcar (lambda (w s)
                                         (format nil "col-~A-~A" w s))
                                       w
                                       (to-list size)))))
                         `(div (,@(join-class `(,att ,class)) ,@atts)
                               ,@(to-list content)))))))
  #+END_SRC
- Usage
  #+BEGIN_SRC lisp
(bs-row-col '((3 "a")
              (3 ("b"))
              (3 ("c"
                  (h2 () "h2")))
              (3 ("d"))))
;;->
;; (DIV (:CLASS "row")
;;      (DIV (:CLASS "col-md-3") "a")
;;      (DIV (:CLASS "col-md-3") "b")
;;      (DIV (:CLASS "col-md-3")
;;           "c"
;;           (H2 NIL "h2"))
;;      (DIV (:CLASS "col-md-3") "d"))


(bs-row-col '(((3 4) "a")
              ((3 4) "b" :class "one")
              ((6 4) ("c") :atts (:id "ccc")))
            :w '("md" "offset-md"))
;;->
;; (DIV (:CLASS "row")
;;      (DIV (:CLASS "col-md-3 col-offset-md-4")
;;           "a")
;;      (DIV (:CLASS "col-md-3 col-offset-md-4 one")
;;           "b")
;;      (DIV (:CLASS "col-md-6 col-offset-md-4" :ID "ccc")
;;           "c"))

  
  #+END_SRC
* GlyphIcon
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun bs-glyphicon (style &key (class "") atts)
  `(span (,@(join-class `(,#?"glyphicon glyphicon-${style}"
                             ,class))
            ,@atts)))

  #+END_SRC

* Carousel
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun bs-carousel (id items &key (class "") atts )
  (let ((ooo) (slides) (count 0))
    (loop for i in items
       do (destructuring-bind (item &key (class "") atts active caption) i
            (push `(li (:data-target ,#?"#${id}"
                                     :class ,(if active "active" "")
                                     :data-slide-to ,count))
                  ooo)
            (incf count)
            (push `(div (,@(join-class `("item"
                                         ,(if active "active" "")
                                         ,class))
                           ,@atts)
                        ,item
                        ,(if caption
                             `(div (:class "carousel-caption") ,@caption)))
                  slides)))
    `(div (,@(join-class `("carousel" ,class))
             :data-ride "carousel"
             :id ,id
             ,@atts)
          ;; ooo 
          (ol (:class "carousel-indicators") ,@(nreverse ooo))
          ;; Slides
          (div (:class "carousel-inner")
               ,@(nreverse slides))
          ;; < >
          ,@(flet ((ctr (side slide title)
                   `(a (:href ,#?"#${id}" 
                              :class ,(concat side " " "carousel-control")
                              :data-slide ,slide)
                       (span (:class ,#?"glyphicon glyphicon-chevron-${side}"))
                       (span (:class "sr-only") ,title))))
            (list (ctr "left" "prev" "Previous")
                  (ctr "right" "next" "Next"))))))
#+END_SRC
- Usage
  #+BEGIN_SRC lisp
(bs-carousel
 "carl"
 '(((img (:src "" :alt "")))
   ((img (:src "" :alt "")) :active t)
   ((img (:src "" :alt ""))
    :caption ((h3 () "h3")
              (p () "pp")))
   ("hh")))
;;-> 
;; (DIV (:CLASS "carousel" :DATA-RIDE "carousel" :ID "carl")
;;      (OL (:CLASS "carousel-indicators")
;;          (LI (:DATA-TARGET "#carl" :CLASS "" :DATA-SLIDE-TO 0))
;;          (LI (:DATA-TARGET "#carl" :CLASS "active" :DATA-SLIDE-TO 1))
;;          (LI (:DATA-TARGET "#carl" :CLASS "" :DATA-SLIDE-TO 2))
;;          (LI (:DATA-TARGET "#carl" :CLASS "" :DATA-SLIDE-TO 3)))
;;      (DIV (:CLASS "carousel-inner")
;;           (DIV (:CLASS "item")
;;                (IMG (:SRC "" :ALT ""))
;;                NIL)
;;           (DIV (:CLASS "item active")
;;                (IMG (:SRC "" :ALT ""))
;;                NIL)
;;           (DIV (:CLASS "item")
;;                (IMG (:SRC "" :ALT ""))
;;                (DIV (:CLASS "carousel-caption")
;;                     (H3 NIL "h3")
;;                     (P NIL "pp")))
;;           (DIV (:CLASS "item") "hh" NIL))
;;      (A (:HREF "#carl" :CLASS "left carousel-control" :DATA-SLIDE "prev")
;;         (SPAN (:CLASS "glyphicon glyphicon-chevron-left"))
;;         (SPAN (:CLASS "sr-only") "Previous"))
;;      (A (:HREF "#carl" :CLASS "right carousel-control" :DATA-SLIDE "next")
;;         (SPAN (:CLASS "glyphicon glyphicon-chevron-right"))
;;         (SPAN (:CLASS "sr-only") "Next")))

  
  #+END_SRC
* Panel
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun bs-panel (&key header body footer (class "") atts (style ""))
  (flet ((fn (part str)
           (destructuring-bind
                 (item &key (class "") atts) part
             `(div (,@(join-class `(,(concat "panel-" str) ,class)) ,@atts)
                   ,@(to-list item)))))
    `(div (,@(join-class `("panel"
                           ,(empty-str-or style :add "panel-")
                           ,class))
             ,@atts)
          ,(if header (fn header "heading"))
          ,(fn body "body")
          ,(if footer (fn footer "footer")))))
  #+END_SRC
- Usage
  #+BEGIN_SRC lisp
(bs-panel :style "default"
          :header '("Heading")
          :footer '("Footer")
          :body '("Content"))

;;-> 
;; (DIV
;;  (:CLASS "panel panel-default")
;;  (DIV
;;   (:CLASS "panel-heading")
;;   "Heading")
;;  (DIV
;;   (:CLASS "panel-footer")
;;   "Heading")
;;  (DIV
;;   (:CLASS "panel-body")
;;   "Content"))
  #+END_SRC
** Group
- group : <div> panel-group  [<div> panel]+

* Navigation Bars
- <nav> navbar navbar-default [navbar-fixed-[...]]
  - container[-fluid]
    - navbar-header
      - navbar-brand
    - <ul> nav navbar-nav [<li> ..]+
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun bs-navbar (navs &key brand (class "") atts (style "default") fluid (fixed ""))
  "style:(default inverse) fixed:(top bottom)"
  `(div (,@(join-class `("navbar"
                         ,(empty-str-or style :add "navbar-")
                         ,(empty-str-or fixed :add "navbar-fixed-")
                         ,class))
           ,@atts)
        (div (:class ,(concat "container" (if fluid "-fluid" "")))
             (div (:class "navbar-header")
                  ,@(to-list brand))
             ,@navs)))

(defun bs-nav (items &key (class "") atts (align ""))
  "align:(right left)"
  `(ul (,@(join-class `("nav navbar-nav"
                         ,(empty-str-or align :add "navbar-")
                         ,class)))
        ,@(loop for i in items
             collect
               (destructuring-bind
                     (item &key (class "") atts (href "#") sp) i
                 (if sp
                     item
                     `(li (:class ,class ,@atts)
                          (a (:href ,href)
                             ,@(to-list item))))))))

(defun bs-nav-collapse (target &key (icons 3))
  `(button (:class "navbar-toggle"
                   :type "button"
                   :data-toggle "collapse"
                   :data-target ,target)
        ,@(loop repeat icons
             collect '(span (:class "icon-bar")))))

  #+END_SRC
- Usage
  #+BEGIN_SRC lisp
(bs-navbar `("navbar") :fixed "bottom")

(bs-navbar `(,(bs-nav `((1)
                        (2)
                        (,(bs-dropdown "dd" '((1) (2)) :tag 'li) :sp t)))
              ,(bs-nav '((1) (2)) :align "right")
              ,(bs-btn '("button") :style "danger" :class "navbar-btn")
              (p (:class "navbar-text") "text" ))
           :brand '((a (:class "navbar-brand" :href "#") "Home")))

(bs-navbar `((div (:class "collapse navbar-collapse" :id "myNB")
                  ,(bs-nav '((1)
                             (2)))))
           :brand `(,(bs-nav-collapse "#myNB")
                     (a (:class "navbar-brand" :href "#") "Home")))
  
  #+END_SRC

* Breadcrumb
- Impl
  #+BEGIN_SRC lisp :tangle yes
(defun bs-breadcrumb (pages &key (class "") atts)
  `(ul (,@(join-class `("breadcrumb" ,class))
          ,@atts)
       ,@(loop for i in pages
            collect (destructuring-bind (page &key href (class "") atts) i
                      (if href 
                          `(li (:class ,class ,@atts)
                               (a (:href ,href) ,@(to-list page)))
                          `(li (:class ,class ,@atts)
                               ,@(to-list page)))))))
  #+END_SRC
- Usage
  #+BEGIN_SRC lisp
(bs-breadcrumb '((("one"))
                 (("two") :class "active")
                 (("three") :class "disabled")))
;;-> 
(UL
 (:CLASS "breadcrumb")
 (LI
  (:CLASS "")
  (A (:HREF "#") "one"))
 (LI
  (:CLASS "active")
  (A (:HREF "#") "two"))
 (LI
  (:CLASS "disabled")
  (A
   (:HREF "#")
   "three"
   (SPAN (:CLASS "divider")))))  
  #+END_SRC
* --- 以下也许还需要修改
* List Groups
- li
  #+BEGIN_SRC lisp
(defun bs-lgroup-li (items &key (class "") atts)
  `(ul (,@(join-class `("list-group" ,class)) ,@atts)
       ,@(loop for i in items
            collect (destructuring-bind (item &key (class "") atts (style "")) i
                      `(li (,@(join-class `("list-group-item"
                                            ,class
                                            ,(empty-str-or style :add "list-group-item-")))
                              ,@atts)
                           ,@(to-list item))))))

;; (bs-lgroup-li '((("one" (span (:class "badge") 3)))
;;                 (2 :class "active" :style "success")
;;                 (3 :class "disabled")))
;;-> 
;; (UL
;;  (:CLASS "list-group")
;;  (LI
;;   (:CLASS "list-group-item")
;;   "one"
;;   (SPAN (:CLASS "badge") 3))
;;  (LI
;;   (:CLASS "list-group-item active list-group-item-success")
;;   2)
;;  (LI
;;   (:CLASS "list-group-item disabled")
;;   3))
  #+END_SRC
- a
  #+BEGIN_SRC lisp
(defun bs-lgroup-a (items &key (class "") atts)
  `(div (,@(join-class `("list-group" ,class)) ,@atts)
       ,@(loop for i in items
            collect (destructuring-bind (item &key (class "") atts (style "") (href "#")) i
                      `(a (,@(join-class `("list-group-item"
                                           ,class
                                           ,(empty-str-or style :add "list-group-item-")))
                             :href ,href
                             ,@atts)
                           ,@(if (not (listp item)) (list item) item))))))

  
;; (bs-lgroup-a '(("one" :href "http://no.com")))
;;-> 
;; (DIV
;;  (:CLASS "list-group")
;;  (A
;;   (:CLASS "list-group-item"
;;           :HREF "http://no.com")
;;   "one"))


  #+END_SRC
- Custom: (heading text)
  #+BEGIN_SRC lisp
(bs-lgroup-a '((((h4 (:class "list-group-item-heading") Heading)
                 (p (:class "list-group-item-text") Text)))))
  #+END_SRC


* Dropdown
- <div> dropdown
  - <button> dropdown-toggel data-toggle="dropdown"
    - <span> caret
  - <ul> dropdown-menu [<li> <a>]+
- d.b
  #+BEGIN_SRC lisp
(defun bs-dropdown (title menus &key (class "") atts (style "") (direction "down") (tag 'div))
  `(,tag (,@(join-class `(,#?"drop${direction}" ,class)) ,@atts)
         (button (,@(join-class `("btn"
                                  ,(empty-str-or style :add "btn-")))
                    :type "button" :data-toggle "dropdown")
                 ,title
                 (span (:class "caret")))
         (ul (:class "dropdown-menu")
             ,@(loop for i in menus
                  collect (destructuring-bind
                                (menu &key (class "") atts (href "#") header) i
                            (cond
                              ((equal menu :-) '(li (:class "divider")))
                              (header `(li (:class "dropdown-header")
                                           ,menu))
                              (t `(li (:class ,class ,@atts)
                                      (a (:href ,href)
                                         ,@(to-list menu))))))))))
  




;; (bs-dropdown "Dropdown" 
;;              '(("HTML")
;;                (:-)
;;                ("Header" :header t)
;;                ("CSS" :class "active")
;;                ("JS" :atts (:id "js")))
;;              :style "primary")
;;-> 
;; (DIV (:CLASS "dropdown")
;;      (BUTTON (:CLASS "btn btn-primary"
;;                      :TYPE "button"
;;                      :DATA-TOGGLE "dropdown")
;;              "Dropdown"
;;              (SPAN (:CLASS "caret")))
;;      (UL (:CLASS "dropdown-menu")
;;          (LI (:CLASS "")
;;              (A (:HREF "#") "HTML"))
;;          (LI (:CLASS "divider"))
;;          (LI (:CLASS "dropdown-header")
;;              "Header")
;;          (LI (:CLASS "active")
;;           (A (:HREF "#") "CSS"))
;;          (LI (:CLASS "" :ID "js")
;;           (A (:HREF "#") "JS"))))


  #+END_SRC

* Collapse
- Toggle
  - <button> data-toggle="collapse" data-target="#target"
  - <a> data-toggle="collapse" href="#target"
- Target: <div> collapse id="target"
- collapse [in]
  #+BEGIN_SRC lisp
(defun bs-collapse-a (title target &key (class "") atts )
  `(a (:data-toggle "collapse" :href ,target ,@atts)
      ,@(to-list title)))

(defun bs-collapse-btn (title target &key (class "") atts )
  `(button (:data-toggle "collapse" :data-target ,target ,@atts)
           ,@(to-list title)))

(defun bs-collapse-tg (id content &key (class "") atts )
  `(div (:id ,id ,@(join-class `("collapse" ,class)) ,@atts)
        ,@(to-list content)))

  #+END_SRC


** panel
- Panel
  - heading title {Collapse-a}
  - <div> collapse  panel-collapse
    - boody
    - footer

** list group

* Tabs | Pills
- <ul> nav nav-tabs [<li> <a>]+
  #+BEGIN_SRC lisp
(defun bs-tabs (tabs &key (class "") atts align toggle)
  "align:(justified)"
  `(ul (,@(join-class `("nav nav-tabs"
                        ,(empty-str-or align :add "nav-")
                        ,class))
          ,@atts)
       ,@(loop for i in tabs
            collect
              (destructuring-bind
                    (item &key (class "") atts (href "#") sp) i
                (if sp
                    item
                    `(li (,@(join-class `("" ,class)) ,@atts)
                         ,(if toggle
                              `(a (:href ,href :data-toggle "tab")
                                  ,@(to-list item))
                              `(a (:href ,href)
                                  ,@(to-list item)))))))))
  

;; (bs-tabs `(("one")
;;            ("two")
;;            (,(bs-dropdown "dp" '((1) (2) (3)) :tag 'li) :sp t)
;;            ("three")))
;;-> 
;; (UL (:CLASS "nav nav-tabs")
;;     (LI (:CLASS "")
;;         (A (:HREF "#") "one"))
;;     (LI (:CLASS "")
;;         (A (:HREF "#") "two"))
;;     (LI (:CLASS "dropdown")
;;         (BUTTON (:CLASS "btn"
;;                         :TYPE "button"
;;                         :DATA-TOGGLE "dropdown")
;;                 "dp"
;;                 (SPAN (:CLASS "caret")))
;;         (UL (:CLASS "dropdown-menu")
;;             (LI (:CLASS "")
;;                 (A (:HREF "#") 1))
;;             (LI (:CLASS "")
;;                 (A (:HREF "#") 2))
;;             (LI (:CLASS "")
;;                 (A (:HREF "#") 3))))
;;     (LI (:CLASS "")
;;         (A (:HREF "#") "three")))

;; (bs-tabs `(("one" :href "#one")
;;            ("two" :href "#two")
;;            ("three" :href "#three"))
;;          :toggle t)

(defun bs-tab-content (items &key (class "") atts )
  `(div (,@(join-class `("tab-content" ,class)) ,@atts)
      ,@(loop for i in items
           collect
             (destructuring-bind
                   (item &key (class "") atts id) i
               `(div (:id ,id ,@(join-class `("tab-pane" ,class)) ,@atts)
                     ,@(to-list item))))))

;; (bs-tab-content '((((h3 () "one")
;;                     (p () "content"))
;;                    :id "one" :class "fade in active")
;;                   (((h3 () "two")
;;                     (p () "content"))
;;                    :id "two" :class "fade")
;;                   (((h3 () "three")
;;                     (p () "content"))
;;                    :id "three" :class "fade")))

  #+END_SRC
- <ul> nav nav-pills [<li> <a>]+
  #+BEGIN_SRC lisp
(defun bs-pills (pills &key (class "") atts (align "") stacked toggle)
  "align:(justified)"
  `(ul (,@(join-class `("nav nav-pills"
                        ,(empty-str-or align :add "nav-")
                        ,(if stacked "nav-stacked" "")
                        ,class))
          ,@atts)
       ,@(loop for i in tabs
            collect
              (destructuring-bind
                    (item &key (class "") atts (href "#") sp) i
                (if sp
                    item
                    `(li (,@(join-class `("" ,class)) ,@atts)
                         ,(if toggle
                              `(a (:href ,href :data-toggle "tab")
                                  ,@(to-list item))
                              `(a (:href ,href)
                                  ,@(to-list item)))))))))
  #+END_SRC


** Toggle
#+BEGIN_SRC lisp
(defun bs-tab-content (items &key (class "") atts )
  `(div (,@(join-class `("tab-content" ,class)) ,@atts)
      ,@(loop for i in items
           collect
             (destructuring-bind
                   (item &key (class "") atts id) i
               `(div (:id ,id ,@(join-class `("tab-pane" ,class)) ,@atts)
                     ,@(to-list item))))))

;; (bs-tab-content '((((h3 () "one")
;;                     (p () "content"))
;;                    :id "one" :class "fade in active")
;;                   (((h3 () "two")
;;                     (p () "content"))
;;                    :id "two" :class "fade")
;;                   (((h3 () "three")
;;                     (p () "content"))
;;                    :id "three" :class "fade")))

#+END_SRC
* Form
- .form-control : width 100%  (input textarea select)
- Layout
  - Vertical (default)
  - Horizontal
    - <label> control-label
  - Inline
- <form> [form-inline|horizontal]
  - [form-group]+
  - Other
- Maybe
  #+BEGIN_SRC lisp
;; NO
;; (bs-form `(,(bs-form-group
;;              `((label (:class "control-label" :for "name") "label")
;;                ,(bs-input "input" :type "test" :form t )))
;;             ,(bs-form-group))
;;          :style "horizontal")
  
  #+END_SRC

* Media Object
#+BEGIN_SRC lisp
(defun bs-media (&key left body right  (class "") atts)
  "position:(top middle bottom)"
  (flet ((fn (item side)
           (destructuring-bind (obj &key (pos "") (class "") atts) item
             `(div (,@(join-class `(,(concat "media-" side)
                                    ,(empty-str-or pos :add "media-")
                                    ,class))
                      ,@atts)
                   ,@(to-list obj))))) ;; ? add-class obj "media-object"
    `(div (,@(join-class `("media" ,class)) ,@atts)
          ,(if left (fn left "left")) 
          (div (:class "media-body") ,@body) ;; ? add-first-class "media-heading"
          ,(if right (fn right "right")))))


;; (bs-media :left '(((img (:class "media-object" :src "img.jpg") ))
;;                   :pos "top")
;;           :body '((h3 (:class "media-heading") "One")
;;                   (p () "PPPPP"))
;;           :right  '(((img (:class "media-object" :src "img.jpg") )
;;                      (p () "ppp"))
;;                     :pos "bottom"))
;;-> 
;; (DIV (:CLASS "media")
;;      (DIV (:CLASS "media-left media-top")
;;           (IMG (:CLASS "media-object" :SRC "img.jpg")))
;;      (DIV (:CLASS "media-body")
;;           (H3 (:CLASS "media-heading")
;;               "One")
;;           (P NIL "PPPPP"))
;;      (DIV (:CLASS "media-right media-bottom")
;;           (IMG (:CLASS "media-object" :SRC "img.jpg"))
;;           (P NIL "ppp")))

;; (bs-media
;;  :left '(((img (:class "media-object" :src "img.jpg") ))
;;          :pos "top")
;;  :body `(,(bs-media
;;            :left '(((img (:class "media-object" :src "img.jpg") ))
;;                    :pos "top")
;;            :body '((h3 (:class "media-heading") "One")
;;                    (p () "PPPPP")))))
;;-> 
;; (DIV (:CLASS "media")
;;      (DIV (:CLASS "media-left media-top")
;;           (IMG (:CLASS "media-object"
;;                        :SRC "img.jpg")))
;;      (DIV (:CLASS "media-body")
;;           (DIV (:CLASS "media")
;;                (DIV (:CLASS "media-left media-top")
;;                     (IMG (:CLASS "media-object" :SRC "img.jpg")))
;;                (DIV
;;                 (:CLASS "media-body")
;;                 (H3 (:CLASS "media-heading")
;;                     "One")
;;                 (P NIL "PPPPP"))
;;                NIL))
;;      NIL)

#+END_SRC

* Modal
- modal
  - -dialog
    - -header
      - [<button> close data-dismiss="modal" > &times;]
      - -title
    - -body
    - -footer
      - [<button> data-dismiss="modal"]


#+BEGIN_SRC lisp

(bs-btn '("Open Model") :style "info" :size "lg" :atts '(:data-toggle "modal" :data-target "#myModal"))

(defun bs-modal (id items &key header body footer (class "") atts (effect "fade") (size "") )
  `(div (:id ,id
         ,@(join-class `("modal" ,effect ,class)) 
         ,@atts)
        (div (,@(join-class `("model-dialog"
                              ,(empty-str-or size :add "modal-"))))
             (div (:class "modal-content")
                  ,(if header 
                       `(div (:class "modal-header")
                             (button (:class "close"
                                             :type "button"
                                             :data-dismiss "modal")
                                     "&times;")
                             ,@header))
                  ,(if body 
                       `(div (:class "modal-body")
                             ,@body))
                  ,(if footer 
                       `(div (:class "modal-footer")
                             ,@footer
                             (button (:class "btn btn-default"
                                             :type "button"
                                             :data-dismiss "modal")
                                     "Close")))))))
;; Maybe
;; (defun ->bs-modal (id)
;;   `((bs-btn ("Open Model") :style "info" :size "lg"
;;             :atts (:data-toggle "modal" :data-target ,#?"#${id}"))
;;     (bs-modal id)))
#+END_SRC

* Tooltip
- data-toggel="tooltip" data-placement="top|bottom|left|right" title="aaa"
- script
  #+BEGIN_SRC html
<script>
$(document).ready(function(){
    $('[data-toggle="tooltip"]').tooltip(); 
});
</script>  
  #+END_SRC
* Popover
- title="Header" data-toggle="popover" data-placement="top|.." data-content="Content"
- title="Dismissible popover" data-toggle="popover" data-trigger="focus|hover" data-content="Click Other close"
- script
  #+BEGIN_SRC html
<script>
$(document).ready(function(){
    $('[data-toggle="popover"]').popover();   
});
</script>  
  #+END_SRC
* Scrollspy
- <body> data-spy="scroll" data-target=".navbar" data-offset="50"
  - [navbar <li><a> href="#section1"]+
  - [<div> id=section1]+
- Vertical
  - <body> data-spy="scroll" data-target="#myScrollspy" data-offset="20"
    - [<nav> id=myScrollspy <li><a> href="#section1" ]+
    - [<div> id=section1]+
* Affix
- <nav> navbar navbar-inverse data-spy="affix" data-offset-top="197"
- <ul> nav nav-pills nav-stacked data-spy="affix" data-offset-top="205"

* -----
* Waiting
#+BEGIN_SRC lisp
;; Base 
(defun bs-base (items &key (class "") atts )
  `(div (,@(join-class `("" ,class)) ,@atts)
      ,@(loop for i in items
           collect
             (destructuring-bind
                   (item &key (class "") atts ) i
               `(div (,@(join-class `("" ,class)) ,@atts)
                     ,@(to-list item))))))

#+END_SRC
