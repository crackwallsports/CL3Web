#+TITLE: Components
#+AUTHOR: Xt3

* Source
- [[https://hackernoon.com/building-a-movie-app-interface-with-vue-js-cdc8aeb5db0][Building a movie app interface with Vue.js]]
- [[http://chibicode.com/react-js-introduction-for-people-who-know-just-enough-jquery-to-get-by/][React.js Introduction For People Who Know Just Enough jQuery To Get By]]
* Load
#+BEGIN_SRC lisp
;; Package
(ql:quickload '( ;; Web Framework
                :ningle :lack :clack
                ;; Websocket
                :websocket-driver
                ;; Router
                :myway
                ;; JS
                :parenscript
                ;; JSON
                :jonathan
                ;; Parse Real Number
                :parse-number
                ;; Regex
                :cl-ppcre)
              :silent t)

;; Helper
(load "base")

;; Components
(load "components")
(com:start :port 3000)
(com:stop)
#+END_SRC
* Base
** Package
#+BEGIN_SRC lisp :tangle yes
(in-package :cl-user)
(defpackage components
  (:use :cl 
        :ningle 
        :xt3.web.base
        :parse-number
        :websocket-driver
        :cl-ppcre)
  (:nicknames :com)
  (:import-from :lack.builder
                :builder)
  (:import-from :lack.response
                :response-headers
                :response-body
                :response-status
                :finalize-response)
  (:import-from :parenscript
                :ps
                :ps*
                :chain
                :create
                :new
                :var
                :@
                :getprop)
  (:import-from :myway
                :make-mapper
                :connect
                :dispatch)
  (:import-from :jonathan
                :to-json)
  (:export :start
           :stop))
(in-package :components)

#+END_SRC
** App
#+BEGIN_SRC lisp :tangle yes
;; APP 
(defparameter *error-log* *standard-output*)
(defparameter *app* (make-instance '<app>))
(defvar *handler* nil)

(defun start (&rest args &key server port debug &allow-other-keys)
  (declare (ignore server port debug))
  (when *handler*
    (restart-case (error "Server is already running.")
      (restart-server ()
        :report "Restart the server"
        (stop))))
  (setf *handler*
        ;; (apply #'clack:clackup *app* args)
        (apply #'clack:clackup
               (builder
                (:static
                 :path (lambda (path)
                         (if (ppcre:scan "^(?:/images/|/css/|/js/|/robot\\.txt$|/favicon\\.ico$)" path)
                             path
                             nil))
                 :root #P"static/") 
                ,*app*)
               args)))

(defun stop ()
  (prog1
      (clack:stop *handler*)
    (setf *handler* nil)))

#+END_SRC
** WebSocket
#+BEGIN_SRC lisp :tangle yes
(defparameter *ws* nil)

(defvar *ws-server*
  (lambda (env)
    (setf *ws* (make-server env))
    (on :message *ws*
        (lambda (message)
          ;; (send *ws* (format nil "[Server] ~A" message))
          ;; (format *error-log* "[log] ~A~%" message)
          (ws->router message)))
    (lambda (responder)
      (declare (ignore responder))
      (start-connection *ws*))))

(defvar *ws-handler* nil)
(defun ws-start ()
  (setf *ws-handler* (clack:clackup *ws-server* :port 5000)))

(defun ws-stop ()
  (prog1
      (clack:stop *ws-handler*)
    (setf *ws-handler* nil)
    (setf *ws* nil)))

#+END_SRC
** Helper
*** Restart
#+BEGIN_SRC lisp :tangle yes
(defun re-com ()
  (if *handler*
      (stop))
  (load "components")
  (start :port 3000))
#+END_SRC
*** Date
#+BEGIN_SRC lisp :tangle yes
(defun human-date (date)
  (and date
       (multiple-value-bind
             (second minute hour day month year)
           (decode-universal-time date)
         (format nil "~4D.~2,'0D.~2,'0D ~2,'0D:~2,'0D:~2,'0D"
                 year month day hour minute second))))
#+END_SRC
* Arc
* COMMENT Model
** Helper
#+BEGIN_SRC lisp :tangle yes
;; Redundancy Count
;; (defparameter *rdd-count* 0)
#+END_SRC
** (Somthing)
*** Helper
#+BEGIN_SRC lisp :tangle yes
#+END_SRC
*** Base
#+BEGIN_SRC lisp :tangle yes
#+END_SRC

* COMMENT DB
#+BEGIN_SRC lisp :tangle yes
;;; DB
(defparameter *some* (make-instance 'some))
#+END_SRC

* Router
** COMMENT /?
*** !
#+BEGIN_SRC lisp :tangle yes
;; POST /?/!
(route->
    :POST "/?/!" 
    #'(lambda (params)
        (let* ((who (cdr (assoc "who" params :test #'string=)))
               (ins ()))
          (or (and i
                   (setf ins (some-action))

                   ;; WebSocket
                   (progn
                     (send *ws* (to-json (list :msg "add" :ins ins)))
                     "Successful")                                      
                   ;; Or
                   ;; <-JSON
                   (<-json (list :ins ins)))
              ;; Error
              "ERROR!"))))

#+END_SRC
** WebSocket
#+BEGIN_SRC lisp :tangle yes
(defun ws->router (msg)
  ;; Movie
  ;; (send *ws* (to-json (list :msg "movie"
  ;;                           :ins (movie-ins msg))))
  ;; Twitter-box
  ;; (send *ws* (to-json (list :msg "tweet-box"
  ;;                           :ins (tweet-box-ins msg))))
  ;; Vue?
  ;; (send *ws* (to-json (list :msg "vue"
  ;;                           :ins (vue-ins msg))))
  (dispatcher msg))

#+END_SRC
** -----
** Base
#+BEGIN_SRC lisp :tangle yes
;; Router
#+END_SRC
*** Helper
#+BEGIN_SRC lisp :tangle yes
;; Router
(defmacro route-> (method path body)
  `(setf (route *app* ,path :method ,method)
         ,body))

;; JSON
(defun <-json (plist)
  (setf (getf (response-headers *response*) :content-type)
                "application/json")
  (to-json plist))


#+END_SRC
** /
#+BEGIN_SRC lisp :tangle yes
;; GET /
(route-> :GET "/" 
         #'(lambda (params)
             (declare (ignore params))
             (index ())))
#+END_SRC


* View
** COMMENT Some
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun some-htm ()
  `(div (:class "")
        (ul (:class "list")
            ;; Items
            ,@(map 'list
                   #'some-item-htm
                   ,*some*))))

(defun some-item-htm (item)
  (with-slots () item
    `(li ())))

#+END_SRC

*** Css
#+BEGIN_SRC lisp :tangle yes
(defun some-css ()
  '(".some" ()))
#+END_SRC
*** Js
#+BEGIN_SRC lisp :tangle yes
(defun some-js ()
  '(defun some-item (obj)
    (jq-ajax "/?/!"
     (create
      :who (chain ($ obj) (text))))
    ;; OR
    ,(jq-ajax "/?/!"
               :data '(create
                       :who (chain ($ obj) (text)))
               :suc '(progn (chain ($ obj) (blur))))))
;; OR
(defun other-js ()
  (ps*
   '(var cur-edit (create
                   obj nil
                   val ""))
   
   `(defun editing (e)
      (var obj (@ e target))
      (unless (chain ($ obj) (has-class "editing"))
        (setf (@ cur-edit obj) obj
              (@ cur-edit val) (chain ($ obj) (val)))
        (chain ($ obj) (toggle-class "editing"))))

   `(defun edited (e)
      (var obj (@ e target))
      (case (@ e key-code)
        (27 ;; "Escape"
         (chain ($ obj) (blur)))
        (13 ;; "Enter"
         ,(jq-ajax "/?"
                   :data nil
                   :suc '(progn
                          (chain ($ obj) (blur))
                          (jq-ins data))))
        (t nil)))
   
   `(defun edit-cancel ()
      (chain
       ($ (@ cur-edit obj))
       (val (@ cur-edit val))
       (remove-class "editing"))
      (setf (@ cur-edit obj) nil
            (@ cur-edit val) ""))))
#+END_SRC
** -----
** Base
*** Helper
#+BEGIN_SRC lisp :tangle yes
;; Instruction
(defun make-ins (tar &rest mes)
  (list :tag tar
        :mes (loop for (act con) in mes
                collect (list :act act
                              :con con))))

;; CSS
(defun x-browser (att val &optional (browser '("webkit" "moz" "ms")))
  (nconc (let ((ls))
           (loop for i in browser
              do (progn (push (make-keyword (format nil "-~A-~A" i att)) ls)
                        (push val ls)))
           (nreverse ls))
         (list (make-keyword att) val)))

;; JS
(defun jq-ajax (url &key (type "post") (data "") suc
                      (err '(alert (@ jqXHR response-text))))
  `(chain
    $
    (ajax (create
           url ,url
           type ,type
           data ,data
           success (lambda (data status)
                     (if (= status "success")
                         ,suc))
           error (lambda (jqXHR textStatus errorThrown)
                   ,err)))))


(defun jq-ins ()
  `(let ((ins (@ data "INS")))
     (chain
      ins
      (for-each (lambda (item)
                  (let ((target (@ item "TAG"))
                        (methods (@ item "MES")))
                    (chain
                     methods
                     (for-each (lambda (item)
                                 (let ((action (@ item "ACT"))
                                       (content (@ item "CON")))
                                   ((getprop ($ target) action) content)))))))))))
#+END_SRC
*** Layout
#+BEGIN_SRC lisp :tangle yes
(defun layout-template (args &key (title "标题") links head-rest content scripts)
  (declare (ignore args))
  `(,(doctype)
     (html (:lang "en")
           (head ()
                 (meta (:charset "utf-8"))
                 (meta (:name "viewport"
                              :content "width=device-width, initial-scale=1, shrink-to-fit=no"))
                 (meta (:name "description" :content "?"))
                 (meta (:name "author" :content "Xt3"))
                 (title nil ,title)
                 ,@links
                 ,@head-rest)
           (body ()
                 ,@content
                 ,@scripts))))

#+END_SRC
** Index
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun index (args)
  (->html
   (layout-template
    args
    :title (or (getf args :title) "我的组件")
    :links `()
    :head-rest
    `((style () ,(index-css)))
    :content
    `((div (:class "components")
           ;; ,(mobile-htm)
           ;; ,(movie-htm)
           ;; ,(tweet-box-htm)
           ,(vue-htm)))
    :scripts
    `((script (:src "js/jquery-3.2.1.min.js"))
      (script () ,(index-js))))))
#+END_SRC
*** Css
#+BEGIN_SRC lisp :tangle yes
(defun index-css ()
  (->css
   `((* (:margin 0 :padding 0
                 :box-sizing "border-box"
                 :outline "none"))
     (html (:height "100vh"))
     (body (:background "#f5f5f5" :font-size "14px"
                        :height "100%"
                        :padding "50px"))
     (a (:text-decoration "none"
                          :color "#bfbfbf"))
     ("a:hover" (:text-decoration "underline"
                                  :color "#000"))
     ("::-webkit-input-placeholder" (:color "#e6e6e6"
                                            :font-style "italic"))
     ("input" (:border "none"
                       :font-size "14px"
                       :padding "1px 2px 1px 5px"))
     
     ("ul" (:list-style "none"))
     
     ;; Float
     (".left" (:float "left"))
     (".right" (:float "right"))
     
     ;; Gird
     ,@(loop for i from 1 to 12
          collect
            `(,(format nil ".w-~a" i)
               (:width ,(format nil "~D%" (round (* 100 (/ i 12))))
                       :float "left")))
     ;; (".w-1" (:WIDTH "8%" :FLOAT "left"))
     
     ;; Disabled
     (".disabled" (:pointer-events "none"))

     ;; Hidden
     (".hidden" (:display "none !important"))
     
     ;; Circle
     (".circle" (:border "1px solid"
                         :border-radius "50%"))
     
     ;; Components
     (".components"
      ()
      ;; ,(mobile-css)
      ;; ,(movie-css)
      ;; ,(tweet-box-css)
      ,(vue-css)
      ))))
#+END_SRC
*** Js
#+BEGIN_SRC lisp :tangle yes
(defun index-js ()
  (concat
   (ps*
    ;; Websocket
    `(var ws null)
    `(defun ws-start ()
       (setf ws (new (*web-socket "ws://localhost:5000/")))
       ;; (setf ws (new (*web-socket "ws://10.0.0.7:5000/")))
       (setf (@ ws onopen) (lambda (e)
                             (chain console (log "Connection open..."))))
       (setf (@ ws onmessage) (lambda (e)
                                ;; (chain console (log (+ "Mes: " (@ json "MSG"))))
                                (var json (chain |json| (parse (@ e data))))
                                (jq-ins json)
                                ;; (var ins (@ json "INS"))
                                ;; (case (@ json "MSG")
                                ;;   ("movie" (ws-movie json))
                                ;;   ("tweet-box" (ws-tweet-box json))
                                ;;   (t ins))
                                ))
       (setf (@ ws onclose) (lambda (e)
                              (chain console (log "Connection closed")))))
    `(defun ws-router (route)
       (chain ws (send route)))
    `(ws-start)
    ;; jQuery Instruction
    `(defun jq-ins (data) ,(jq-ins))
    ;; Ajax
    `(defun jq-ajax (url data)
       ,(jq-ajax 'url
                 :data 'data
                 :suc '(jq-ins data)))
    ;; Content
    ;; (mobile-js)
    ;; (movie-js)
    )
   ;; (tweet-box-js)
   (vue-js)))

#+END_SRC
** -----
** COMMENT Mobile
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun mobile-htm ()
  `(div (:class "mobile") "移动"))
#+END_SRC

*** Css
#+BEGIN_SRC lisp :tangle yes
(defun mobile-css ()
  '(".mobile" (:width "340px" :height "600px" :margin "auto"
               :border "1px solid")))
#+END_SRC
*** Js
#+BEGIN_SRC lisp :tangle yes
(defun mobile-js () "")
#+END_SRC
** COMMENT Movie
*** Vue.js
**** data
#+BEGIN_SRC js
const movies = {
  "dunkirk": {
    "id": 'dunkirk',
    "title": "Dunkirk",
    "subtitle": "Dunkirk",
    "description": `Miraculous evacuation of Allied soldiers from Belgium, Britain, Canada, and France, who were cut off and surrounded by the German army from the beaches and harbor of Dunkirk, France, during the Battle of France in World War II.`,
    "largeImgSrc": `url('https://image.tmdb.org/t/p/w780/fudEG1VUWuOqleXv6NwCExK0VLy.jpg')`,
    "smallImgSrc": 'https://image.tmdb.org/t/p/w185/fudEG1VUWuOqleXv6NwCExK0VLy.jpg',
    "releaseDate": 'July 21 2017',
    "duration": '1hr 46min',
    "genre": 'Action, Drama, History',
    "trailerPath": 'https://www.youtube.com/embed/F-eMt3SrfFU',
    "favorite": false
  },
  "interstellar": {
    "id": 'interstellar',
    "title": "Interstellar",
    "subtitle": "Interstellar",
    "description": `Interstellar chronicles the adventures of a group of explorers who make use of a newly discovered wormhole to surpass the limitations on human space travel and conquer the vast distances involved in an interstellar voyage.`,
    "largeImgSrc": `url('https://image.tmdb.org/t/p/w780/xu9zaAevzQ5nnrsXN6JcahLnG4i.jpg')`,
    "smallImgSrc": 'https://image.tmdb.org/t/p/w185/xu9zaAevzQ5nnrsXN6JcahLnG4i.jpg',
    "releaseDate": 'November 7 2014',
    "duration": '2hr 49min',
    "genre": 'Adventure, Drama',
    "trailerPath": 'https://www.youtube.com/embed/zSWdZVtXT7E',
    "favorite": false
  },
  "the-dark-knight-rises": {
    "id": 'the-dark-knight-rises',
    "title": "The Dark Knight Rises",
    "subtitle": "TDKR",
    "description": `Batman encounters the mysterious Selina Kyle and the villainous Bane, a new terrorist leader who overwhelms Gotham's finest. The Dark Knight resurfaces to protect a city that has branded him an enemy.`,
    "smallImgSrc": 'https://image.tmdb.org/t/p/w185/3bgtUfKQKNi3nJsAB5URpP2wdRt.jpg',
    "largeImgSrc": `url('https://image.tmdb.org/t/p/w780/3bgtUfKQKNi3nJsAB5URpP2wdRt.jpg')`,
    "releaseDate": 'July 20 2012',
    "duration": '2hr 44min',
    "genre": 'Action, Thriller',
    "trailerPath": 'https://www.youtube.com/embed/g8evyE9TuYk',
    "favorite": false
  },
  "inception": {
    "id": 'inception',
    "title": "Inception",
    "subtitle": "Inception",
    "description": `Cobb, a skilled thief is offered a chance to regain his old life as payment for a task considered to be impossible: \"inception\", the implantation of another person's idea into a target's subconscious.`,
    "smallImgSrc": 'https://image.tmdb.org/t/p/w185/s2bT29y0ngXxxu2IA8AOzzXTRhd.jpg',
    "largeImgSrc": `url('https://image.tmdb.org/t/p/w780/s2bT29y0ngXxxu2IA8AOzzXTRhd.jpg')`,
    "releaseDate": 'July 10 2010',
    "duration": '2hr 28min',
    "genre": 'Action, Adventure, Sci-Fi',
    "trailerPath": 'https://www.youtube.com/embed/8hP9D6kZseM',
    "favorite": false
  },
  "the-prestige": {
    "id": 'the-prestige',
    "title": "The Prestige",
    "subtitle": "Prestige",
    "description": `A mysterious story of two magicians whose intense rivalry leads them on a life-long battle for supremacy - to create the ultimate illusion whilst sacrificing everything they have to outwit the other.`,
    "smallImgSrc": 'https://image.tmdb.org/t/p/w185/c5o7FN2vzI7xlU6IF1y64mgcH9E.jpg',
    "largeImgSrc": `url('https://image.tmdb.org/t/p/w780/c5o7FN2vzI7xlU6IF1y64mgcH9E.jpg')`,
    "releaseDate": 'October 20 2006',
    "duration": '2hr 10min',
    "genre": 'Drama, Mystery, Sci-Fi',
    "trailerPath": 'https://www.youtube.com/embed/ijXruSzfGEc',
    "favorite": false
  }
}
#+END_SRC
**** htm
#+BEGIN_SRC html
<div id="app">
 <section class="hero is-primary is-medium">
   
   <router-view></router-view>

  <div class="hero-foot">
   <div class="columns is-mobile">
     <div v-for="movieChoice in movieChoices" class="column">

       <router-link :to="`/${movieChoice.id}`" 
                    tag="li"    
                    class="movie-choice">
         <i :class="[{ 'fa fa-check-circle favorite-check':  movieChoice.favorite }]"></i>
         <img :src="`${movieChoice.smallImgSrc}`" class="desktop"/>
         <p class="mobile">{{ movieChoice.subtitle }}</p>
       </router-link>
       <!-- 
       <li class="movie-choice">
         <img :src="`${movieChoice.smallImgSrc}`" class="desktop"/>
         <p class="mobile">{{ movieChoice.subtitle }}</p>
       </li>
       -->
     </div>
    </div>
  </div>
 </section>
</div>

#+END_SRC
**** js
***** App
#+BEGIN_SRC js
// App
const rootApp = new Vue({
    el: '#app',
    router: router,  // ++
    data() {
        return {
            movieChoices: movies 
        }
    }
})
#+END_SRC
***** Component
#+BEGIN_SRC js
// Component
#+END_SRC
****** Intro
#+BEGIN_SRC js
// Intro
const Intro = {
    template:
    `<div class="hero-body" style="background: #1e1d1d">
      <div class="container has-text-centered">
        <div class="columns">
          <div class="column is-half is-offset-one-quarter vertical-align">
            <h1 class="home-intro">
              VueFlix
            </h1>
            <p class="home-subintro">Select a movie below from the list of critically acclaimed Christopher Nolan films.</p>
          </div>
        </div>
      </div>
    </div>`
}
#+END_SRC
****** Movie
#+BEGIN_SRC js
// Movie
const Movie = {
  template: 
    `<div>
      <div class="hero-body">
       <div class="container has-text-centered">
        <div class="columns">
         <div class="column is-half is-offset-one-quarter vertical-align">
          <h1 class="home-intro">
           {{ selectedMovie.title }}
          </h1>
         </div>
        </div>
       </div>
      </div>
    </div>`
//=>
`<div :class="[{ 'favorite-shadow': selectedMovie.favorite }, 'hero-body']"
    :style="{ 'background-image': selectedMovie.largeImgSrc }">
    <header class="nav">
     <div class="container">
      <div class="nav-left">
       <a class="nav-item">
        <i class="fa fa-bars" aria-hidden="true"></i>
       </a>
       <router-link to="/" class="nav-item is-active">
        Home
       </router-link>
       <a class="nav-item is-active">
        <span class="tag is-rounded">Films</span>
       </a>
       <a class="nav-item is-active">
        Shows
       </a>
       <a class="nav-item is-active">
        Music
       </a>
      </div>
      <div class="nav-right desktop">
       <span class="nav-item">
        <a class="title">
         VueFlix
        </a>
       </span>
      </div>
     </div>
    </header>
    <div class="container description-container">
     <div class="columns">
      <div class="column is-three-quarters">
       <h1 class="title">{{ selectedMovie.title }}</h1>
       <h4 class="subtitle">
        <p class="subtitle-tag">{{ selectedMovie.duration }}</p>
        <p class="subtitle-tag">{{ selectedMovie.genre }}</p>
        <p class="subtitle-tag">{{ selectedMovie.releaseDate }}</p>
       </h4>
       <p class="description">{{ selectedMovie.description }}</p>
       <div class="links">
        <router-link 
          :to="{path: '/' + $route.params.id + '/trailer'}"   
          class="button play-button">
           Play <i class="fa fa-play"></i>
        </router-link>
      <a 
       class="button is-link favorites-button"
       @click="addToFavorites">
      <span
       :class="[{ 'hide': selectedMovie.favorite }]">
       Add to
      </span>
      <span
       :class="[{ 'hide': !selectedMovie.favorite }]">
       Remove from
      </span>
       &nbsp;favorites 
       <i class="fa fa-plus-square-o"></i>
      </a>
       </div>
      </div>
     </div>
    </div>
   </div>`,
  data () {
    return {
      selectedMovie: movies[this.$route.params.id]
    }
  },
  watch: {
    $route () {
      this.selectMovie()
    }
  },
  methods: {
      selectMovie () {
          this.selectedMovie = movies[this.$route.params.id]
      },
      addToFavorites() {
          movies[this.$route.params.id].favorite = !movies[this.$route.params.id].favorite
      }
  }
}
#+END_SRC
****** Movie Trailer
#+BEGIN_SRC js
const MovieTrailer = {
 template: `
  <div class="trailer-body" style="background: #1e1d1d">
   <div class="has-text-centered">
    <div class="columns">
     <div class="column vertical-align">
      <iframe
       allowFullScreen
       frameborder="0"
       height="376"
       :src="trailerUrlPath"
       style="width: 100%; min-width: 536px"
      />
     </div>
    </div>
   </div>
  </div>`,
  data () {
   return {
    trailerUrlPath: movies[this.$route.params.id].trailerPath
   }
  }
}
#+END_SRC
***** Router
#+BEGIN_SRC js
// Router
const routes = [
    { path: '/', component: Intro },
    { path: '/:id', component: Movie },
    { path: '/:id/trailer', component: MovieTrailer }
]
const router = new VueRouter({
    routes
})
#+END_SRC
**** css
#+BEGIN_SRC css
.favorite-shadow {
  box-shadow: 0 0 50px 15px rgba(251, 255, 15, 0.25);
}
.favorite-check {
  position: absolute;
  right: 5px;
  top: 5px;
  z-index: 1;
  color: #fcff4c;
            
  @media(max-width: $medium) {
   position: initial;
   display: block;
  }
}
#+END_SRC
*** -----
*** Model
#+BEGIN_SRC lisp :tangle yes
(defclass movie ()
  ((id :initarg :id
       :accessor id)
   (title :initarg :title
          :accessor title)
   (subtitle :initarg :subtitle
             :accessor subtitle)
   (description :initarg :description
                :accessor description)
   (large-img-src :initarg :large-img-src
                  :accessor large-img-src)
   (small-img-src :initarg :small-img-src
                  :accessor small-img-src)
   (release-date :initarg :release-date
                 :accessor release-date)
   (duration :initarg :duration
             :accessor duration)
   (genre :initarg :genre
          :accessor genre)
   (trailer-path :initarg :trailer-path
                 :accessor trailer-path)
   (favorite :initarg :favorite
             :accessor favorite)))
#+END_SRC
*** Data
#+BEGIN_SRC lisp :tangle yes
(defparameter *movies* (make-hash-table :test #'equal))
(maphash (lambda (k v)
           (setf (gethash k *movies*)
                 (make-instance 'movie
                                :id (gethash "id" v)
                                :title (gethash "title" v)
                                :subtitle (gethash "subtitle" v)
                                :description (gethash "description" v)
                                :large-img-src (gethash "largeImgSrc" v)
                                :small-img-src (gethash "smallImgSrc" v)
                                :release-date (gethash "releaseDate" v)
                                :duration (gethash "duration" v)
                                :genre (gethash "genre" v)
                                :trailer-path (gethash "trailerPath" v)
                                :favorite (gethash "favorite" v))))
         (jojo:parse "{
\"dunkirk\": {
    \"id\": \"dunkirk\",
    \"title\": \"Dunkirk\",
    \"subtitle\": \"Dunkirk\",
    \"description\": \"Miraculous evacuation of Allied soldiers from Belgium, Britain, Canada, and France, who were cut off and surrounded by the German army from the beaches and harbor of Dunkirk, France, during the Battle of France in World War II.\",
    \"largeImgSrc\": \"url('https://image.tmdb.org/t/p/w780/fudEG1VUWuOqleXv6NwCExK0VLy.jpg')\",
    \"smallImgSrc\": \"https://image.tmdb.org/t/p/w185/fudEG1VUWuOqleXv6NwCExK0VLy.jpg\",
    \"releaseDate\": \"July 21 2017\",
    \"duration\": \"1hr 46min\",
    \"genre\": \"Action, Drama, History\",
    \"trailerPath\": \"https://www.youtube.com/embed/F-eMt3SrfFU\",
    \"favorite\": false
  },
\"interstellar\": {
    \"id\": \"interstellar\",
    \"title\": \"Interstellar\",
    \"subtitle\": \"Interstellar\",
    \"description\": \"Interstellar chronicles the adventures of a group of explorers who make use of a newly discovered wormhole to surpass the limitations on human space travel and conquer the vast distances involved in an interstellar voyage.\",
    \"largeImgSrc\": \"url('https://image.tmdb.org/t/p/w780/xu9zaAevzQ5nnrsXN6JcahLnG4i.jpg')\",
    \"smallImgSrc\": \"https://image.tmdb.org/t/p/w185/xu9zaAevzQ5nnrsXN6JcahLnG4i.jpg\",
    \"releaseDate\": \"November 7 2014\",
    \"duration\": \"2hr 49min\",
    \"genre\": \"Adventure, Drama\",
    \"trailerPath\": \"https://www.youtube.com/embed/zSWdZVtXT7E\",
    \"favorite\": false
  },
\"the-dark-knight-rises\": {
    \"id\": \"the-dark-knight-rises\",
    \"title\": \"The Dark Knight Rises\",
    \"subtitle\": \"TDKR\",
    \"description\": \"Batman encounters the mysterious Selina Kyle and the villainous Bane, a new terrorist leader who overwhelms Gotham's finest. The Dark Knight resurfaces to protect a city that has branded him an enemy.\",
    \"smallImgSrc\": \"https://image.tmdb.org/t/p/w185/3bgtUfKQKNi3nJsAB5URpP2wdRt.jpg\",
    \"largeImgSrc\": \"url('https://image.tmdb.org/t/p/w780/3bgtUfKQKNi3nJsAB5URpP2wdRt.jpg ')\",
    \"releaseDate\": \"July 20 2012\",
    \"duration\": \"2hr 44min\",
    \"genre\": \"Action, Thriller\",
    \"trailerPath\": \"https://www.youtube.com/embed/g8evyE9TuYk\",
    \"favorite\": false
  },
\"inception\": {
    \"id\": \"inception\",
    \"title\": \"Inception\",
    \"subtitle\": \"Inception\",
    \"description\": \"Cobb, a skilled thief is offered a chance to regain his old life as payment for a task considered to be impossible: inception, the implantation of another person's idea into a target's subconscious.\",
    \"smallImgSrc\": \"https://image.tmdb.org/t/p/w185/s2bT29y0ngXxxu2IA8AOzzXTRhd.jpg\",
    \"largeImgSrc\": \"url('https://image.tmdb.org/t/p/w780/s2bT29y0ngXxxu2IA8AOzzXTRhd.jpg')\",
    \"releaseDate\": \"July 10 2010\",
    \"duration\": \"2hr 28min\",
    \"genre\": \"Action, Adventure, Sci-Fi\",
    \"trailerPath\": \"https://www.youtube.com/embed/8hP9D6kZseM\",
    \"favorite\": false
  },
\"the-prestige\": {
    \"id\": \"the-prestige\",
    \"title\": \"The Prestige\",
    \"subtitle\": \"Prestige\",
    \"description\": \"A mysterious story of two magicians whose intense rivalry leads them on a life-long battle for supremacy - to create the ultimate illusion whilst sacrificing everything they have to outwit the other.\",
    \"smallImgSrc\": \"https://image.tmdb.org/t/p/w185/c5o7FN2vzI7xlU6IF1y64mgcH9E.jpg\",
    \"largeImgSrc\": \"url('https://image.tmdb.org/t/p/w780/c5o7FN2vzI7xlU6IF1y64mgcH9E.jpg')\",
    \"releaseDate\": \"October 20 2006\",
    \"duration\": \"2hr 10min\",
    \"genre\": \"Drama, Mystery, Sci-Fi\",
    \"trailerPath\": \"https://www.youtube.com/embed/ijXruSzfGEc\",
    \"favorite\": false
  }
}" :as :hash-table))


;; (maphash (lambda (k v)
;;            (format t "~A = ~A~%" k v)
;;            (format t "id = ~A~%" (id v)))
;;          *movies*)

#+END_SRC
*** Operation
#+BEGIN_SRC lisp :tangle yes
(defun movie-by-id (id)
  (gethash id *movies*))

;; Instruction
(defun movie-ins (msg)
  (list
   (list :tag ".detail"
         :mes `((:act "html" :con ,(movie-router msg))))))
#+END_SRC
*** Router
#+BEGIN_SRC lisp :tangle yes
(defun movie-router (route)
  (let ((mapper (make-mapper)))
    (connect mapper "/" (->html (intro-htm)))
    (connect mapper "/:id" (lambda (params)
                             (->html (movie-item-htm (getf params :id)))))
    (connect mapper "/:id/trailer" (lambda (params)
                                     (->html (movie-trailer-htm (getf params :id)))))
    (or (dispatch mapper route) "")))
#+END_SRC
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun movie-htm ()
  `(div (:class "movie")
        (div (:class "detail")
             ,(movie-router "/"))
        (div (:class "show")
             (ul (:class "row")
                 ,@(let ((items))
                     (maphash (lambda (k v)
                                (push (show-item-htm v) items))
                              ,*movies*)
                     items)))))

(defun intro-htm ()
  `(div (:class "intro")
        (h1 (:class "title") "CL3FLIX")
        (p (:class "subtitle")
           "Select a movie below from the list of critically acclaimed Christopher Nolan films.")))

(defun movie-item-htm (id)
  (with-slots (id title description
                  duration genre release-date
                  large-img-src
                  favorite)
      (movie-by-id id)
    `(div (:class ,(concat (if favorite "favorite-shadow " " ")
                           "item")
                  :style ,(concat "background-image: " large-img-src))
          (div (:class "header nav")
               (div (:class "nav-left")
                    (div (:class "nav-item")
                         (i (:class "bars")))
                    (div (:class "nav-item")
                         (span (:onclick "wsRouter('/')")
                               "Home"))
                    (div (:class "nav-item tag")
                         (span ( :onclick "wsRouter('/films')") "Films"))
                    (div (:class "nav-item")
                         (span (:onclick "wsRouter('/shows')") "Shows"))
                    (div (:class "nav-item")
                         (span (:onclick "wsRouter('/music')") "Music")))
               (div (:class "nav-right")
                    (div (:class "nav-item") "CL3Flix")))
          (div (:class "content")
               (h1 (:class "title") ,title)
               (h4 (:class "subtitle")
                   (p (:class "subtitle-tag") ,duration " | ")
                   (p (:class "subtitle-tag") ,genre " | ")
                   (p (:class "subtitle-tag") ,release-date))
               (p (:class "description") ,description)
               (div (:class "links")
                    (span (:class "play" :onclick ,(concat "wsRouter('/" id "/trailer')" ))
                            "Play"
                            (i (:class "fa fa-play")))
                    (span (:class "favorite" :onclick ,(concat "favorite('" id "')"))
                            ,(if favorite "Remove from Favorite" "Add to Favorite")))))))

(defun movie-trailer-htm (id)
  (with-slots (trailer-path) (movie-by-id id)
    `(div (:class "trailer")
          (iframe (:allowfullscreen "allowfullscreen"
                                    :frameborder "0"
                                :src ,trailer-path )))))

(defun show-item-htm (item)
  (with-slots (id small-img-src) item
    `(li (:class "item" :onclick ,(concat "wsRouter('/" id "')"))
         (img (:src ,small-img-src))
         ;; (span (:class "test circle") "%")
         )))

#+END_SRC

*** Css
#+BEGIN_SRC lisp :tangle yes
(defun movie-css ()
  '(".movie" (:margin "auto 20px" :height "550px"
              ;; :border "1px solid"
              :display "flex" :flex-flow "column"
              :box-shadow "0px 0px 60px 0px black")
    (".detail" (:display "flex" :align-items "center"
                :height "75%"
                :background "#000")
     (".intro" (:text-align "center" :margin "auto")
      (".title" (:color "#f00" :font-size "4em"
                        :letter-spacing "3px"))
      (".subtitle" (:color "#fff" :font-size "1.3em"
                           :width "80%" :margin "auto")))
     (".item" (:width "100%" :height "100%"
                      :color "#fff"
                      :background-size "cover"
                      :background-blend-mode "multiply"
                      :background-color "rgba(0, 0, 0, 0.3)")
      (".header" (:display "flex" :align-items "center"
                           :height "20%"
                           :font-size "1.5em")
                 (".nav-left" (:display "flex" :align-items "center"
                                        :width "80%"))
                 (".nav-right" (:text-align "right"
                                            :width "20%"
                                            :color "#f00"))
                 (".nav-item" (:margin "0 10px" :padding " 3px 9px"
                                       :cursor "pointer"))
                 (".tag" (:border-radius "19px"
                                         :color "#000" :background "#fff"))
                 (".bars::before" (:content "'\\f0c9'"
                                            :font-size "2em"
                                            :color "#f00")))
      (".content" (:padding "10px 60px" :height "80%")
                  (".title" (:font-size "3em"))
                  (".subtitle" (:display "flex" :color "#f00"
                                         :font-size "1.3em"
                                         :margin "5px 0")
                               ("p" (:margin "0 5px 0 0")))
                  (".description" (:line-height "1.5em"
                                                :width "80%"
                                                :font-size "1.2em"
                                                :min-height "110px"))
                  (".links" (:margin-top "20px"))
                  (".play" (:border-radius "30px"
                                           :background "#f00"
                                           :padding "10px 20px"
                                           :font-size "1.3em"
                                           :cursor "pointer"))
                  (".favorite" (:margin-left "20px"
                                             :padding "0 10px"
                                             :cursor "pointer"))))
     (".trailer" (:width "100%" :height "100%")
      ("iframe" (:width "100%" :height "100%"))))
    (".show" (:display "flex" :align-items "center"
              :width "100%" :height "25%"
              :padding "10px" ;; :border "1px solid"
              :background "linear-gradient(to bottom right, #7d1e24, #bb2d35)")
     (".row" (:display "flex" :width "100%"))
     (".item" (:width "20%" :height "100px"
                      :position "relative"
                      :margin "0 5px"
                      ;; :border "1px dashed" 
                      ))
     ("img" (:height "100%" :width "100%"))
     (".test" (:width "20px" :height "20px"
                      :position "absolute" :right 0 :top 0
                      :text-align "center")))))
#+END_SRC
*** Js
#+BEGIN_SRC lisp :tangle yes
(defun movie-js ()
  `(defun ws-movie (ins)
     (jq-ins ins)))

#+END_SRC
** COMMENT Tweet Box
*** jQuery
**** htm
#+BEGIN_SRC html
<body>
  <div class="well clearfix">
    <textarea class="form-control"></textarea><br/>
    <span>140</span>
    <button class="btn btn-primary pull-right">Tweet</button>
  </div>
</body>
#+END_SRC
**** js
#+BEGIN_SRC js
// Initially disable the button
$("button").prop("disabled", true);

// When the value of the text area changes...
$("textarea").on("input", function() {
    $("span").text(140 - $(this).val().length);
    // If there's at least one character...
    if ($(this).val().length > 0) {
        // Enable the button.
        $("button").prop("disabled", false);
    } else {
        // Else, disable the button.
        $("button").prop("disabled", true);
    }
});
#+END_SRC

*** React.js
**** htm
#+BEGIN_SRC html
<!DOCTYPE html>
<html>
<head>
<script src="https://fb.me/react-15.1.0.js"></script>
<script src="https://fb.me/react-dom-15.1.0.js"></script>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
  <meta charset="utf-8">
  <title>JS Bin</title>
</head>
<body>
  <div id="container"></div>
</body>
</html>
#+END_SRC
**** js
#+BEGIN_SRC js
var TweetBox = React.createClass({
    
    // State
    getInitialState: function() {
        return {
            text: "",
            photoAdded: false
        };
    },
    
    // Event
    handleChange: function(event) {
        // console.log(event.target.value);
        this.setState({ text: event.target.value });
    },
    togglePhoto: function(event) {
        this.setState({ photoAdded: !this.state.photoAdded });
    },

    //
    remainingCharacters: function() {
        if (this.state.photoAdded) {
            return 140 - 23 - this.state.text.length;
        } else {
            return 140 - this.state.text.length;
        }
    },

    // Render
    render: function() {
        return (
                <div className="well clearfix">
                //
                <textarea className="form-control"
            onChange={this.handleChange}>
                </textarea>
                <br/>

            // <span>{140 - this.state.text.length}</span>
                <span>{ this.remainingCharacters() }</span>
                // <button className="btn btn-primary pull-right" disabled>Tweet</button>
                // <button className="btn btn-primary pull-right"
            disabled={this.state.text.length === 0}>Tweet</button>
                <button className="btn btn-primary pull-right"
            disabled={this.state.text.length == 0 && !this.state.photoAdded}>Tweet</button>
                <button className="btn btn-default pull-right" onClick={this.togglePhoto}>
                {this.state.photoAdded ? "✓ Photo Added" : "Add Photo" }
            </button>
                
            </div>
        );
    }
});

ReactDOM.render(
        <TweetBox />,
    document.getElementById("container")
);
#+END_SRC
*** -----
*** Model
#+BEGIN_SRC lisp :tangle yes
(defclass state ()
  ((text :initarg :text
         :initform ""
         :accessor state-text)
   (chars-limit :initarg :chars-limit
                 :initform 140
                 :reader state-chars-limit)
   (medias :initarg :medias
           :initform 0
           :accessor state-medias)
   (ins :initarg :ins
         :accessor state-ins)))

(defmethod (setf state-text) :before (value (state state))
  (setf (state-ins state)
        (remove-if #'null
                   (list
                    (make-ins ".box .test"
                              `("text" ,(concat "Test: " value)))
                    (cond
                      ((and (zerop (length (state-text state)))
                            (plusp (length value)))
                       (make-ins ".box .submit"
                                 '("removeClass" "disabled")))
                      ((and (zerop (state-medias state))
                            (zerop (length value)))
                       (make-ins ".box .submit"
                                 '("addClass" "disabled"))))
                    (make-ins ".box .chars-remain"
                              `("text" ,(format nil "~D" (len-chars-remain value))))))))

(defun len-chars-remain (text)
  (- (state-chars-limit *state*)
     (length text)))

(defmethod (setf state-medias) :before (value (state state))
  (setf (state-ins state)
        (remove-if #'null
                   (let (res)
                     (push (make-ins ".box .media-con"
                                     `("html" ,(->html (show-media-htm value))))
                           res)
                     (cond
                       ((and (zerop (state-medias state))
                             (plusp value))
                        (push (make-ins ".box .media-con"
                                        '("removeClass" "hidden"))
                              res)
                        (push (make-ins ".box .submit"
                                        '("removeClass" "disabled"))
                              res))
                       ((and (zerop value)
                             (zerop (length (state-text state))))
                        (push (make-ins ".box .media-con"
                                        '("addClass" "hidden"))
                              res)
                        (push (make-ins ".box .submit"
                                        '("addClass" "disabled"))
                              res)))
                     (nreverse res)))))

(defun show-media-htm (medias)
  `(div (:class "show-media" :onclick "removeMedia(event)")
        ,@(let (res)
            (dotimes (i medias)
              (push `(div (:class "media")
                          (img (:class "show" :src "#" :alt "🎆"))
                          (span (:class "close") "❌"))
                    res))
            (nreverse res))))

#+END_SRC
*** Data
#+BEGIN_SRC lisp :tangle yes
(defparameter *state* (make-instance 'state))
#+END_SRC
*** Operation
#+BEGIN_SRC lisp :tangle yes
;; Instruction
(defun tweet-box-ins (msg)
  (let* ((json (jojo:parse msg)))
    (cond
      ((getf json :|route|))
      ((getf json :|act|)
       (case-str (getf json :|act|)
         ("text-change"
          (progn
            (setf (state-text *state*) (getf json :|val|))
            (state-ins *state*)))
         ("up-media"
          (progn
            (setf (state-medias *state*) (getf json :|val|))
            (state-ins *state*)))
         ("remove-media"
          (progn
            (decf (state-medias *state*))
            (state-ins *state*)))
         (t "")))
      (t ""))))

#+END_SRC
*** COMMENT Router
#+BEGIN_SRC lisp :tangle yes
(defun movie-router (route)
  (let ((mapper (make-mapper)))
    (connect mapper "/" (->html (intro-htm)))
    (connect mapper "/:id" (lambda (params)
                             (->html (movie-item-htm (getf params :id)))))
    (connect mapper "/:id/trailer" (lambda (params)
                                     (->html (movie-trailer-htm (getf params :id)))))
    (or (dispatch mapper route) "")))
#+END_SRC
*** Htm
**** box
#+BEGIN_SRC lisp :tangle yes
(defun tweet-box-htm ()
  (with-slots (text medias) *state*
    `(div (:class "box")
          (img (:class "user-img avatar" :scc "#" :alt "󠁺😁"))
          (div (:class "content")
               (textarea (:class "text" :onkeyup "textChange(event)")
                         ,text)
               ;; (div (:class "text" :contenteditable "true"
               ;;              :onkeyup "textChange(event)")
               ;;      ,text)
               (div (:class ,(concat "media-con" (if (zerop medias)
                                                    " hidden"
                                                    "")))
                    ,(show-media-htm medias))
               (div (:class "tools")
                    (input (:type "file" :name "up-media" :id "up-media"
                                  :class "file-input"
                                  :multiple ""
                                  :accept "image/gif,image/jpeg,image/jpg,image/png,video/mp4,video/x-m4v"
                                  :onchange "upMedia(event)"))
                    (label (:for "up-media") "🌌")
                    (span (:class "spacing") "")
                    (span (:class "chars-remain")
                          ,(format nil "~D" (len-chars-remain text)))
                    (button (:class ,(concat "submit" (if (and (zerop medias)
                                                               (zerop (length text))) " disabled" "")))
                            "Tweet"))
               (pre (:class "test")
                    "Test:" ,text)))))

;; (send *ws* (to-json (list :msg "twitter-box"
       ;;                           :ins (list
       ;;                                 (make-ins ".box .text"
       ;;                                          `("val" "<a>abc</a>"))))))

       ;; (defun remain-warning ()
       ;;   (with-slots (text chars-limit) *state*
       ;;     (let ((len (- chars-limit (length text))))
       ;;       (if (minusp len)
       ;;           (list (subseq text 0 139)
       ;;                 `(span (:class "remain-warning")
       ;;                        ,(subseq text 139)))
       ;;           (list text)))))
#+END_SRC

*** Css
#+BEGIN_SRC lisp :tangle yes
(defun tweet-box-css ()
  '(".box" (:margin "auto 20px" :padding "10px 20px"
            :display "flex"
            :box-shadow "0px 0px 1px 0px black")
    ;; User-Image
    (".avatar" (:background "white"
                :border-radius "50%"
                :font-size "30px" :text-align "center"
                :width "40px" :height "40px"
                :padding "3px 0" :margin-right "5px"))

    ;; Content
    (".content" (:display "flex" :flex-flow "column" :flex-grow "1")
     (".text" (:min-height "80px" :max-height "300px"
                           :word-wrap "break-word"
                           :overflow "scroll"
                           :padding "10px"
                           :border "1px solid" :border-radius "5px"
                           :background "white"
                           :resize "none")
      ;; (".remain-warning" (:background "#f1bbab"))
      )

     ;; Media
     (".media-con" (:display "flex" :align-items "center"
                             ;; :height "100px"
                             :margin-top "-10px" :padding-top "10px"
                             :border "1px solid" :border-radius "6px")
      (".show-media" (:padding "10px" :width "100%"
                               :display "flex" :flex-wrap "wrap"))
      (".media" (:font-size "60px" :width "60px"
                            :position "relative"
                            :margin "0 10px"))
      (".close" (:font-size "10px" :width "20px" :height "20px"
                            :position "absolute" :right "-8px" :top "-5px"
                            :padding "2px 0 0 4px"))
      (".close:hover" (:cursor "pointer")))

     ;; Tools
     (".tools" (:display "flex" :align-items "center"
                         :padding "10px 0")
      (".file-input" (:width "0.1px" :height "0.1px" :position "absolute"
                             :overflow "hidden" :opacity "0"
                             :z-index "-1"))
      (".file-input + label" (:font-size "2.5em"))
      (".file-input + label:hover" (:cursor "pointer" ))
      (".spacing" (:flex-grow "1"))
      (".chars-remain" (:padding "10px"))
      (".submit" (:width "60px" :padding "10px"
                         :border-radius "5px"
                         :background "#fff" :color "#a0a0a0"))
      (".submit:hover" (:cursor "pointer"))
      (".submit.disabled" (:background "#f0f0f0" :color "#cfcfcf"
                                       :border "none"))))))
#+END_SRC
*** Js
#+BEGIN_SRC lisp :tangle yes
(defun tweet-box-js ()
  (ps* 
   `(defun ws-tweet-box (ins)
      (jq-ins ins))

   `(defun text-change (e)
      ;; (chain console (log e))
      (var msg (chain |json|
                 (stringify (create
                             act "text-change"
                             val (@ e target value)))))
      (chain ws (send msg)))
   
   `(defun up-media (e)
      ;; (chain console (log e))
      (var msg (chain |json|
                 (stringify (create
                             act "up-media"
                             val (@ e target files length)))))
      (chain ws (send msg)))

   `(defun remove-media (e)
      (var obj (@ e target))
      (when (chain ($ obj) (has-class "close"))
        (var msg (chain |json|
                   (stringify (create
                               act "remove-media"
                               val ""))))
        (chain ws (send msg))))))
#+END_SRC
** Learning Vue
- [[https://cn.vuejs.org/v2/guide/index.html#%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%B8%B2%E6%9F%93][Vue.js 文档]]
*** 介绍
**** 声明式渲染
#+BEGIN_SRC lisp
;; App
(add-state "message" "Hello Vue!")
(defun vue-htm ()
  (let ((message (get-state "message")))
    `(div (:id "app") ,(<-data "#app" message))))

;; App-2
;; 此处不需要绑定 title值在加载时确定 之后不需更改
(defun vue-htm ()
  `(div (:id "app-2")
        (span (:title ,(concat "页面加载于 "
                               (human-date (get-universal-time)))))))

#+END_SRC
**** 条件与循环
#+BEGIN_SRC lisp
;; App-3
(add-state "seen" t)

(defun vue-htm ()
  (let ((seen (get-state "seen")))
    `(div (:id "app-3")
          ;; v-if="seen"
          ,(<-data-if "#app-3" seen
                      '(p () "现在你看到我了")))))


;; App-4
(add-state "todos" '((:text "学习 JavaScript")
                     (:text "学习 Vue")
                     (:text "整个牛项目")))
;; ?? todos = (defclass list-state (state))
;; ?? todo = (defclass plist-state (state))

(add-state "todos"
           (list (make-state "todo-0" "学习 JavaScript")
                 (make-state "todo-1" "学习 Vue")
                 (make-state "todo-2" "整个牛项目")))
(defun vue-htm ()
  (let ((todos (get-state "todos")))
    `(div (:id "app-3")
          (ol ()
              ;; v-for="todo in todos"
              ,@(<-data "#app-3 ol" todos
                        (lambda (val)
                          (loop for todo in val
                             collect (let ((id (format nil "~A" (random 100000))))
                                       `(li (:id ,id)
                                            ,(<-data (concat "#" id)  todo))))))))))

;; ?? push todos
#+END_SRC
**** 处理用户输入
#+BEGIN_SRC lisp
;; App-5
(add-state "message" "Hello Vue.js!")
(defun vue-htm ()
  (let ((message (get-state "message")))
    `(div (:id "app-5")
          (p () ,(<-data "#app-5 p" message))
          ;; v-on:click="reverseMessage"
          (button (:onclick ,(data-> "click" message "#app-5 button"
                                     (lambda (val)
                                       (reverse val))))
                  "逆转消息"))))


;; App-6
(add-state "message" "hello Vue!")
(defun vue-htm ()
  (let ((message (gethash "message" *states*)))
    `(div (:id "app-6")
          (input (:type "text" :id "input-word" 
                        :onkeyup ,(data-> "input" message)))
          (p () ,(<-data "#app-6 p" message)))))
#+END_SRC
**** 组件化应用构建
#+BEGIN_SRC lisp
;; App-7
(add-state "grocery-list"
           (list (make-state "0" '(:id 0 :text "蔬菜"))
                 (make-state "1" '(:id 1 :text "奶酪"))
                 (make-state "2" '(:id 2 :text "随便其他什么人吃的东西"))))

(defun todo-item-htm (todo)
  (let ((id (format nil "~A" (random 100000))))
    `(li (:id ,id)
         ,(<-data (concat "#" id)  todo
                  (lambda (val)
                    (getf val :text))))))

(defun vue-htm ()
  (let ((grocery-list (get-state "grocery-list")))
    `(div (:id "app-7")
          (ol ()
              ,@(<-data "#app-7 ol" grocery-list
                        (lambda (val)
                          (loop for todo in val
                             collect (todo-item-htm todo))))))))

#+END_SRC
*** 计算属性和观察者
#+BEGIN_SRC lisp
;; computed
(add-state "message" "Hello")
(defun vue-htm ()
  (let ((message (get-state "message")))
    `(div (:id "app")
          (p () ,(<-data "#app :nth-child(1)" message
                         (lambda (val)
                           (concat "Original message: " val))))
          (p () ,(<-data "#app :nth-child(2)" message
                         (lambda (val)
                           (concat "Computed reversed message: "
                                   (reverse val))))))))

(change-state "message" "New hello")

;; watch
(add-state "first-name" "Foo")
(add-state "second-name" "Bar")
(add-state "full-name" "Foo Bar")
(defun get-full-name (val)
  (change-state "full-name"
                (concat
                 (state-val (get-state "first-name"))
                 " "
                 (state-val (get-state "second-name")))))
(add-observer (get-state "first-name") "full-name"
              #'get-full-name)
(add-observer (get-state "second-name") "full-name"
              #'get-full-name)
(state-val (get-state "full-name"))
(defun vue-htm ()
  (let ((full-name (get-state "full-name")))
    `(div (:id "app")
          ,(<-data "#app" full-name))))

(change-state "first-name" "天")
(change-state "second-name" "明明")
;; (change-state "full-name" "游 天明")

;;=> computed
(defun vue-htm ()
  (let ((first-name (get-state "first-name"))
        (second-name (get-state "second-name")))
    `(div (:id "app")
          ,(<-mutli-data "#app" (list first-name second-name)
                   #'get-full-name
                   ;; (lambda (name1 name2)
                   ;;   (concat name1 " " name2))
                   ))))

(defun get-full-name (name1 name2)
  (concat name1 " " name2))

;; setter
(defun set-full-name (full-name)
  (destructuring-bind (name1 name2) (split " " full-name)
    (setf (slot-value (get-state "first-name") 'val) name1)
    (change-state "second-name" name2)))

(set-full-name "无敌 量贩")
#+END_SRC
*** Class 与 Style 绑定
**** 绑定Class 对象和数组 语法
#+BEGIN_SRC lisp
;; <div class="static"
;;     v-bind:class="{ active: isActive, 'text-danger': hasError }">
;; </div>

`(div (,(join-class "static"
                    (<-data-class "div .static"
                                  ('is-active "active")
                                  ('has-error "text-danger")
                                  ;; OR
                                  'class-obj
                                  ;; OR
                                  'active-class
                                  'error-class))))
;; ?? "div" 定位

;; Ins
(if is-active "addClass" "removeClass")

;; class-obj = ('is-active "active" 'has-error "text-danger")
;; active-class = "active"
;; error-class = "text-danger"

;; ?? 计算属性
;;-| computed: {
;;-|   classObject: function () {
;;-|     return {
;;-|       active: this.isActive && !this.error,
;;-|       'text-danger': this.error && this.error.type === 'fatal'
;;-|     }
;;-|   }
;;-| }

;; <div v-bind:class="[activeClass, errorClass]"></div>
`(div (,(join-class "somdiv"
                    (<-data-class ".somdiv"
                                  ))))
#+END_SRC

**** 绑定Class 对象和数组 语法
#+BEGIN_SRC lisp
;; <div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>
;; <div v-bind:style="styleObject"></div>
;;-| styleObject: { color: 'red', fontSize: '13px' }

`(div (:class "static"
              :style ,(<-data-style "div .static"
                                   ("color" 'active-color)
                                   ("fontSize" 'font-size (lambda (val)
                                                            (convat val "px")))
                                   ;; OR
                                   'style-obj)))

;; <div :style="{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }"></div>

`(div (:class "static"
              :style ,(css-x-browser "display" "flex"
                                     (list (bs-current-browser)))))

#+END_SRC
*** 组件
**** data 必须是函数
#+BEGIN_SRC lisp
(defun my-component ()
  (let ((message "hello"))
    `(span () ,message)))

(let ((counter (make-instance 'state :name 'counter :val 0)))
  (defun simple-counter ()
    `(button (:onclick ,(data-> "button" counter #'incf)) ,counter)))


(defun simple-counter ()
  (let ((counter (make-state 'counter 0)))
    `(button (:onclick ,(data-> "button" counter #'incf)) ,counter)))
#+END_SRC
**** 组合组件
#+BEGIN_SRC lisp
(defun child (message)
  `(span () ,message))

(defun child (message)
  `(span (:id "span-x") (<-data "span-x" message)))

(defun htm ()
  `(div ()
        (input (:onkeyup ,(data-> "input" parent-msg)))
        ,(child panrent-msg)))


#+END_SRC
**** 自定义事件
#+BEGIN_SRC lisp
(let ((value (make-instance 'state :name 'value :val 0.0)))
  (defun currency-input ()
    `(span ()
           (input (:id "input-x"
                       :onkeyup ,(data-> "input" value)
                       :value ,(<-data-val "input-x" value
                                           (lambda (val)
                                             (format nil "~,2F" val))))))))
#+END_SRC
*** -----
*** Binding ?
- View => Event => Action -WebSocket-> Dispatcher => Ins -WebSocket-> View
- Bind
  - <-data Tag State Process
  - data-> Type State Tag Preprocess

**** Base
#+BEGIN_SRC lisp :tangle yes
;; Ins
(defun send-ins (ins)
  (send *ws* (to-json (list :msg "vue"
                            :ins ins))))

;; Css
(defun vue-css () "")
#+END_SRC
**** State
#+BEGIN_SRC lisp :tangle yes
;; All Data
(defparameter *states* (make-hash-table :test #'equal))

;; State : name val
(defclass state ()
  ((name :initarg :name
         :reader state-name)
   (val :initarg :val
        :accessor state-val)
   ;; Observer
   (obs :initform (make-hash-table :test #'equal))
   ;; Preprocess
   (prep :initform (make-hash-table :test #'equal))))

(defun make-state (name &optional val)
  (make-instance 'state :name name :val val))

(defmethod (setf state-val) (value (state state))
  (unless (equal value (slot-value state 'val))
    (setf (slot-value state 'val) value)
    (maphash (lambda (k v)
               (funcall v value))
             (slot-value state 'obs))))

(defmethod add-observer ((state state) tag process)
  (setf (gethash tag (slot-value state 'obs)) process))
(defmethod rem-observer ((state state) tag)
  (remhash tag (slot-value state 'obs)))

(defmethod add-preprocess ((state state) tag preprocess)
  (setf (gethash tag (slot-value state 'prep)) preprocess))
(defmethod rem-preprocess ((state state) tag)
  (remhash tag (slot-value state 'prep)))
(defmethod preprocess ((state state) tag val)
  (funcall (gethash tag (slot-value state 'prep)) val))

;; Operation
(defun add-state (name val)
  (setf (gethash name *states*) (make-state name val)))
(defun get-state (name)
  (gethash name *states*))
(defun change-state (name new-val)
  (setf (state-val (get-state name)) new-val))

#+END_SRC

**** Dispatcher
#+BEGIN_SRC lisp :tangle yes
;; Dispatcher

;; Backend
(defun dispatcher (msg)
  (let* ((json (jojo:parse msg)))
    (cond
      ((getf json :|route|))
      ((getf json :|act|)
       (case-str (getf json :|act|)
         ("input-change"
          (progn
            (let ((stat (gethash (getf json :|stat|) *states*))
                  (nval (getf json :|val|))
                  (tag (getf json :|tag|)))
              (when stat
                (if tag
                    (setf nval (preprocess stat tag nval)))
                (setf (state-val stat) nval )))))
         ("click"
          (progn
            (let ((stat (gethash (getf json :|stat|) *states*))
                  (tag (getf json :|tag|)))
              (and stat tag
                   (setf (state-val stat) (preprocess stat tag (state-val stat)))))))
         (t "")))
      (t))))


;; Front-end
(defun vue-js ()
  (ps*
   `(defun input-change (obj stat tag)
      (var msg (chain |json|
                 (stringify (create
                             act "input-change"
                             stat stat
                             tag tag
                             val (chain ($ obj) (val))))))
      (chain ws (send msg)))
   `(defun some-click (stat tag)
      (var msg (chain |json|
                 (stringify (create
                             act "click"
                             stat stat
                             tag tag))))
      (chain ws (send msg)))))
#+END_SRC

**** Binding 
#+BEGIN_SRC lisp :tangle yes
;; View -> Model
(defun data-> (type state &optional tag preprocess)
  (case-str type
    ("input" (progn
               (if (and tag preprocess)
                   (progn 
                     (add-preprocess state tag preprocess)
                     (concat "inputChange(this, '" (state-name state) "', '" tag "')"))
                   (concat "inputChange(this, '" (state-name state) "')"))))
    ("click" (progn
               (if (and tag preprocess)
                   (progn 
                     (add-preprocess state tag preprocess)
                     (concat "someClick('" (state-name state) "', '" tag "')"))
                   "")))))

;; Model -> View
(defun <-data (tag state &optional process)
  (let ((val (state-val state)))
    (if process
        (setf val (funcall process (state-val state))))
    (add-observer
     state
     tag
     (lambda (val)
       (send-ins (list
                  (make-ins tag
                            `("html" ,(->html (if process
                                                  (funcall process val)
                                                  val))))))))
    val))

(defun <-mutli-data (tag states process)
  (apply process
         (loop for state in states
            do (add-observer
                state
                tag
                (lambda (val)
                  (declare (ignore val))
                  (send-ins (list
                             (make-ins tag
                                       `("html" ,(->html (apply process
                                                                (loop for state in states
                                                                   collect (state-val state))))))))))
            collect (state-val state))))

(defun <-data-if (tag state t-exp &optional f-exp)
  (let ((val (state-val state)))
    (add-observer
     state
     tag
     (lambda (val)
       (let ((res f-exp))
         (if val (setf res t-exp))
         (send-ins (list (make-ins tag `("html" ,(->html res))))))))
    (if val t-exp f-exp)))
#+END_SRC
**** Binding Ex.
***** COMMENT if
#+BEGIN_SRC lisp :tangle yes
;; if binding
(add-state "seen" t)
(defun vue-htm ()
  (let ((seen (get-state "seen")))
    `(div (:id "app")
          ,(<-data-if "#app" seen 
                      `(p () "现在你看到我了吗?")))))

(change-state "seen" (not (state-val (get-state "seen"))))

#+END_SRC
***** COMMENT for
#+BEGIN_SRC lisp :tangle yes
;; for binding
(add-state "todos" (list (make-state "todo-0" "学习 JavaScript")
                         (make-state "todo-1" "学习 Vue")
                         (make-state "todo-2" "整个牛项目")))
(defun vue-htm ()
  (let ((todos (get-state "todos")))
    `(div (:id "app-3")
          (ol ()
              ;; v-for="todo in todos"
              ,@(<-data "#app-3 ol" todos
                        (lambda (val)
                          (loop for todo in val
                             collect (let ((id (format nil "~A" (random 100000))))
                                       `(li (:id ,id)
                                            ,(<-data (concat "#" id)  todo))))))))))

(let ((todo (second (state-val (get-state "todos")))))
  (setf (state-val todo) "学习 Common lisp"))

(change-state "todos" (list (make-state "todo-0" "不要学习 不学习")
                            (make-state "todo-1" "不要学习 学习")
                            (make-state "todo-2" "不要 整个牛 项目")))
(vue-htm)

#+END_SRC
***** COMMENT input
#+BEGIN_SRC lisp :tangle yes
;; input binding
(add-state "word" "hello")
(defun vue-htm ()
  (let ((word (gethash "word" *states*)))
    `(div (:id "app")
          (input (:type "text" :id "input-word" 
                        :onkeyup ,(data-> "input" word)))
          (p () ,(<-data "#app p" word)))))
  #+END_SRC
***** 
***** COMMENT click
#+BEGIN_SRC lisp :tangle yes
;; click binding
(add-state "message" "Hello Vue.js!")
(defun vue-htm ()
  (let ((message (get-state "message")))
    `(div (:id "app-5")
          (p () ,(<-data "#app-5 p" message))
          ;; v-on:click="reverseMessage"
          (button (:onclick ,(data-> "click" message "#app-5 button"
                                     (lambda (val)
                                       (reverse val))))
                  "逆转消息"))))


  #+END_SRC

