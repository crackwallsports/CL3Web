#+TITLE: Market
#+AUTHOR: Xt3

* Source
- surface from: [[https://reactforbeginners.com][https://reactforbeginners.com]]

* Load
#+BEGIN_SRC lisp
(ql:quickload :ningle)
(ql:quickload :lack)
;; JS
(ql:quickload :parenscript)
;; JSON
(ql:quickload :jonathan)
;; Helper
(load "base")

(load "market")
(mk:start :port 3000)
(mk:stop)

(in-package :mk)

(defun re-mk ()
  (if mk::*handler*
      (mk:stop))
  (load "market")
  (mk:start :port 3000))
#+END_SRC
* Base
** Package
#+BEGIN_SRC lisp :tangle yes
(in-package :cl-user)
(defpackage market
  (:use :cl :ningle :xt3.web.base)
  (:nicknames :mk)
  (:import-from :lack.builder
                :builder)
  (:import-from :lack.response
                :response-headers
                :response-body
                :response-status
                :finalize-response)
  (:import-from :parenscript
                :ps
                :ps*
                :chain
                :create
                :new
                :var
                :@
                :getprop)
  (:import-from :jonathan
                :to-json)
  (:export :start
           :stop))
(in-package :market)

#+END_SRC
** App
#+BEGIN_SRC lisp :tangle yes
 
(defparameter *app* (make-instance '<app>))
(defvar *handler* nil)

(defun start (&rest args &key server port debug &allow-other-keys)
  (declare (ignore server port debug))
  (when *handler*
    (restart-case (error "Server is already running.")
      (restart-server ()
        :report "Restart the server"
        (stop))))
  (setf *handler*
        ;; (apply #'clack:clackup *app* args)
        (apply #'clack:clackup
               (builder
                (:static
                 :path (lambda (path)
                         (if (ppcre:scan "^(?:/images/|/css/|/js/|/robot\\.txt$|/favicon\\.ico$)" path)
                             path
                             nil))
                 :root #P"static/") 
                ,*app*)
               args)))

(defun stop ()
  (prog1
      (clack:stop *handler*)
    (setf *handler* nil)))

#+END_SRC
* Arc
** COMMENT Layout (Outdated)
- 1 Page = 3 column
  - Goods = 35%
    - Maket-Logo|Title (Fixed)
    - Lists (Scroll)
      - Li = 2 column
        - Goods-img : [Img]  = 30%
        - 3 row = 70% 
          - 1r
            - Goods-name (L)
            - Goods-price (R)
          - Goods-Recommend
          - Goods-status : [Add-to-Oreder | Sold-out(?:Img)]
  - Order = 30%
    - Title : "YOUR OREDER"
    - Lists (Scroll)
      - Li = L&R (Hover->Action:"Remove")
        - Order-goods-quantity Order-goods-name
        - Order-goods-total
    - Footer = L&R
      - "Total"
      - Order-price-total
  - Inventory = 35%
    - Titele : "INVENTORY"
    - Lists (Scroll)
      - Li = Table(4r:(3c 1c 1c 1c))
        - 3c
          - -goods-name
          - -total-quantity
          - -goods-status : ["Fresh!" | "Sold Out!"]
        - -goods-recommend
        - -goods-img : [Link]
        - Action : "Remove"
   
** Status & Rel
- Rel
  - Goods.-status -click:addGoods()->
    - Oreder Item
      - Order.-quantity
      - Order.-n-price
    - Order.-total-price
    - Inventory.-quantity
    - Inventory.-status
  - Inventory Table -Edit()->
    - -img-link -> Goods.-img
    - -recommend -> Goods.-recommend
    - -status -> Goods.-status
    - -name -> Goods.-name
- Status
  - Goods.status : [Add-to-Oreder | Sold-out(?:Img)] = F|T

* DB
#+BEGIN_SRC lisp :tangle yes
;;; Market
;; Inventory-array = name quantity price recommend img-link
;; Goods-hs = name index-in-inventory
;; Order-ht = name : (id quantity price*num) 

;; goods
(defparameter *mk-goods* (make-hash-table :test 'equal))
;; order
(defparameter *mk-order* (make-hash-table :test 'equal))
(defparameter *mk-order-ttp* 0)         ; total-price
;; inventory
(defparameter *mk-inventory*
  (make-array 0
              :fill-pointer t
              :adjustable t))

(loop for i from 0 to 10 do
     (let ((name (concat "商品-" i))
           (rcd (concat "推荐-" i))
           (il (concat "http://img-" i ".jpg")))
       (vector-push-extend
        `(,name 20 1.99 ,rcd ,il)
        ,*mk-inventory*)
       (setf (gethash name *mk-goods*) i)))


#+END_SRC

* Router
** Base
#+BEGIN_SRC lisp :tangle yes
;; Router
#+END_SRC
*** Helper
#+BEGIN_SRC lisp :tangle yes
;; Router
(defmacro route-> (method path body)
  `(setf (route *app* ,path :method ,method)
         ,body))

;; Redundancy Count
(defparameter *rdd-count* 0)

;; JSON
(defun <-json (plist)
  (setf (getf (response-headers *response*) :content-type)
                "application/json")
  (to-json plist))


#+END_SRC
** /
#+BEGIN_SRC lisp :tangle yes
;; GET /
(route-> :GET "/" 
         #'(lambda (params)
             (declare (ignore params))
             (index ())))
#+END_SRC
** /order
*** Add
#+BEGIN_SRC lisp :tangle yes
;; POST /order/add
(route->
    :POST "/order/add" 
    #'(lambda (params)
        (let* ((name (cdr (assoc "goods-name" params :test #'string=)))
               (i (gethash name *mk-goods*))
               (ins ()))
          (cond
            (i
             (let ((num (second (aref *mk-inventory* i)))
                   (price (third (aref *mk-inventory* i)))
                   (item (gethash name *mk-order*))
                   (action "")
                   (g-ins (list :tag ".order .list" :mes ())))
               (and (if (> num 0) t (progn "??? UI Error!" nil))
                    ;; quantity - 1
                    (progn (setf (second (aref *mk-inventory* i)) (decf num))
                           (push (list :tag (concat ".inventory .list .table:nth-child(" (+ i 2) ") .quantity")
                                       :mes `((:act "text" :con ,(concat num "个"))))
                                 ins))
                    ;; Goods.-status = sold out
                    (if (= num 0)
                        (push (list :tag (concat ".goods .list li:nth-child(" (+ i 1) ") .status")
                                    :mes `((:act "text" :con "卖完")
                                           (:act "addClass" :con "disabled")))
                              ins)
                        t))
               ;; Order Add|Replace
               (cond
                 ;; Replace
                 (item
                  (incf (second item))
                  (incf (third item) price)
                  (setf (getf g-ins :tag) (format nil ".order .list #~A" (first item))
                        action "replaceWith"))
                 (t
                  ;; Add
                  (setf item (list (format nil "~D~3,'0D" (get-universal-time) (incf *rdd-count*))
                                   1
                                   price)
                        (gethash name *mk-order*) item
                        action "prepend")))
               (push (list :act action
                           :con (->html (order-item name item)))
                     (getf g-ins :mes))
               (push g-ins ins)
               (incf *mk-order-ttp* price))

             ;; Change: Total-price
             (push (list :tag ".order .total-price"
                         :mes `((:act "text" :con ,(format nil "¥~,2f" *mk-order-ttp*))))
                   ins)
             
             ;; <-JSON
             (<-json (list :ins ins)))
            (t
             ;; Error
             "")))))


;; (defclass order ()
;;   (items)
;;   (total-price))
#+END_SRC

*** Del
#+BEGIN_SRC lisp :tangle yes
;; POST /order/del
(route->
    :POST "/order/del" 
    #'(lambda (params)
        (let* ((name (cdr (assoc "goods-name" params :test #'string=)))
               (i (gethash name *mk-goods*))
               (ins ()))
          (if i
              (let ((num (second (aref *mk-inventory* i)))
                    (item (gethash name *mk-order*)))
                (and item
                     (if (= num 0)
                         (push (list :tag (concat ".goods .list li:nth-child(" (+ i 1) ") .status")
                                     :mes `((:act "text" :con "订购")
                                            (:act "removeClass" :con "disabled")))
                               ins)
                         t)
                     (setf (second (aref *mk-inventory* i)) (incf num (second item)))
                     (push (list :tag (concat ".inventory .list .table:nth-child(" (+ i 2) ") .quantity")
                                 :mes `((:act "text" :con ,(concat num "个"))))
                           ins)
                     ;; Change: Total-price
                     (decf *mk-order-ttp* (third item))
                     (push (list :tag ".order .total-price"
                                 :mes `((:act "text" :con ,(format nil "¥~,2f" *mk-order-ttp*))))
                           ins)
                     ;; Remove Item
                     (remhash name *mk-order*)
                     (push (list :tag (concat ".order #" (first item))
                                 :mes `((:act "remove" :con :null)))
                           ins)
                     ;; <-JSON
                     (<-json (list :ins ins))))
              ;; Error
              "ERROR!"))))

#+END_SRC


** -----
** Test
*** COMMENT /test/json
#+BEGIN_SRC lisp :tangle yes
;; POST /test/json
(route->
    :POST "/test/json" 
    #'(lambda (params)
        (declare (ignore params))
        (setf (getf (response-headers *response*) :content-type)
              "application/json")
        (to-json
         `(:|target| ".goods .list"
            :|action| "prepend"
            :|content| ,(->html
                         '(li ()
                           (img (:class "img w-4" :src "#" :alt "Goods"))
                           (div (:class "content w-8")
                            (span (:class "name left") "仙丹")
                            (span (:class "price right") "¥1.99")
                            (p (:class "recommend") "灵丹妙药 食之升仙")
                            (span (:class "status") "订购"))))))))

#+END_SRC

*** COMMENT /test/chart
#+BEGIN_SRC lisp :tangle yes
;; POST /test/chart
(route->
    :POST "/test/chart" 
    #'(lambda (params)
        (declare (ignore params))
        (setf (getf (response-headers *response*) :content-type)
              "application/json")
        (to-json
         `(:|target| ".goods .list"
            :|action| "prepend"
            :|content| ,(->html
                         '(canvas (:id "ichart"
                                   :width "200"
                                   :height "200")))))))

#+END_SRC


* View
** Base
*** Helper
#+BEGIN_SRC lisp :tangle yes
;; CSS
(defun x-browser (att val &optional (browser '("webkit" "moz" "ms")))
  (nconc (let ((ls))
           (loop for i in browser
              do (progn (push (make-keyword (format nil "-~A-~A" i att)) ls)
                        (push val ls)))
           (nreverse ls))
         (list (make-keyword att) val)))

;; JS
(defun jq-ajax (url &key (type "post") (data "") suc
                      (err '(alert (@ jqXHR response-text))))
  `(chain
    $
    (ajax (create
           url ,url
           type ,type
           data ,data
           success (lambda (data status)
                     (if (= status "success")
                         ,suc))
           error (lambda (jqXHR textStatus errorThrown)
                   ,err)))))


(defun jq-ins ()
  `(let ((ins (@ data "INS")))
     (chain
      ins
      (for-each (lambda (item)
                  (let ((target (@ item "TAG"))
                        (methods (@ item "MES")))
                    (chain
                     methods
                     (for-each (lambda (item)
                                 (let ((action (@ item "ACT"))
                                       (content (@ item "CON")))
                                   ((getprop ($ target) action) content)))))))))))
#+END_SRC
*** COMMENT Resource
#+BEGIN_SRC lisp :tangle yes

#+END_SRC
*** Layout
#+BEGIN_SRC lisp :tangle yes
(defun layout-template (args &key (title "标题") links head-rest content scripts)
  (declare (ignore args))
  `(,(doctype)
     (html (:lang "en")
           (head ()
                 (meta (:charset "utf-8"))
                 (meta (:name "viewport"
                              :content "width=device-width, initial-scale=1, shrink-to-fit=no"))
                 (meta (:name "description" :content "?"))
                 (meta (:name "author" :content "Xt3"))
                 (title nil ,title)
                 ,@links
                 ,@head-rest)
           (body ()
                 ,@content
                 ,@scripts))))

#+END_SRC
** Index
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun index (args)
  (->html
   (layout-template
    args
    :title (or (getf args :title) "我的市场")
    :links `()
    :head-rest
    `((style () ,(index-css)))
    :content
    `((div (:class "market")
           ,(goods-htm)
           ,(order-htm)
           ,(inventory-htm)))
    :scripts
    `(;;,(getf *web-links* :jq-js)
      (script (:src "js/jquery-3.2.1.min.js"))
      ;; (script (:src "js/Chart.bundle.min.js"))
      (script () ,(index-js))))))

#+END_SRC
*** Css
#+BEGIN_SRC lisp :tangle yes
(defun index-css ()
  (->css
   `((* (:margin 0 :padding 0
                 :box-sizing "border-box"
                 :outline "none"))
     (html (:height "100vh"))
     (body (:background "#f5f5f5" :font-size "14px"
                        :height "100%"
                        :padding "50px"))
     (a (:text-decoration "none"
                          :color "#bfbfbf"))
     ("a:hover" (:text-decoration "underline"
                                  :color "#000"))
     ("::-webkit-input-placeholder" (:color "#e6e6e6"
                                            :font-style "italic"))
     ("input" (:border "none"
                       :font-size "14px"
                       :padding "1px 2px 1px 5px"))
     
     ("ul" (:list-style "none"))
     
     ;; Float
     (".left" (:float "left"))
     (".right" (:float "right"))
     
     ;; Gird
     ,@(loop for i from 1 to 12
          collect
            `(,(format nil ".w-~a" i)
               (:width ,(format nil "calc(~a*100%/12)" i)
                       :float "left")))
     ;; (".w-1" (:width "calc(1*100%/12)" :float "left")) ...
     
     ;; Disabled
     (".disabled" (:pointer-events "none"))

     
     ;; Market
     (".market" (:background "white" :border "2px solid black"
                             :height "100%"))
     ,(goods-css)
     ,(order-css)
     ,(inventory-css))))
#+END_SRC
*** Js
#+BEGIN_SRC lisp :tangle yes
(defun index-js ()
  (ps*
   `(defun jq-ins (data) ,(jq-ins))
   `(defun jq-ajax (url data)
      ,(jq-ajax 'url
                :data 'data
                :suc '(jq-ins data)))
   (goods-js)
   (order-js)
   (inventory-js)))

#+END_SRC
** -----
** Goods
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun goods-htm ()
  `(div (:class "goods left")
        (h1 (:class "title") "市场")
        (ul (:class "list")
            ;; Items
            ,@(loop for i from 0 below (length *mk-inventory*)
                 collect
                   (destructuring-bind (name num price rcd il) (aref *mk-inventory* i)
                     `(li ()
                          (img (:class "img w-4" :src "#" :alt "Goods"))
                          (div (:class "content w-8")
                               (span (:class "name left")
                                     ,(format nil "~A" name))
                               (span (:class "price right")
                                     ,(format nil "¥~A" price))
                               (p (:class "recommend")
                                  ,(format nil "~A" rcd))
                               (span (:class ,(concat "status" (if (<= num 0) " disabled" ""))
                                             :onclick "addOrderItem(this)")
                                     ,(if (<= num 0) "卖完" "订购")))))))))

#+END_SRC

*** Css
#+BEGIN_SRC lisp :tangle yes
(defun goods-css ()
  '(".goods" (:border "1px solid"
              :height "100%"
              :overflow "scroll"
              :width "35%")
    (".title" (:font-size "50px"
               :font-weight "100"
               :border-bottom "1px solid"
               :margin "0px 10px"
               :text-align "center"
               :height "100px"))
    (".list" (:margin "0 10px")
     ("li" (:border-top "1px solid"
                        :border-bottom "1px solid"
                        :margin "2px 0"
                        :min-height "100px")
      ("img" (:border "1px dashed"
                      :margin "3px 0"
                      :height "90px"))
      (".content" (:padding "3px")
                  (".recommend" (:clear "both"))
                  (".status" (:border "1px solid orange"
                                      :border-radius "4px"
                                      :color "orange"
                                      :cursor "pointer"
                                      :padding "2px"))
                  (".status:hover" (:background "orange"
                                                :color "white")))))))
#+END_SRC
*** Js
#+BEGIN_SRC lisp :tangle yes
(defun goods-js ()
  '(defun add-order-item (obj)
    (jq-ajax "/order/add"
     (create 
      :goods-name (chain 
                   ($ obj) (parent) (children ".name")
                   (text))))))
#+END_SRC
**** COMMENT test/json
#+BEGIN_SRC lisp :tangle yes
(defun goods-js ()
  `(defun add-goods ()
     ,(jq-ajax
       "/test/json"
       :suc '(progn
              (let ((target (@ data "target"))
                    (action (@ data "action"))
                    (content (@ data "content")))
                ((getprop ($ target) action) content))))))
#+END_SRC
**** COMMENT test/chart
#+BEGIN_SRC lisp :tangle yes
(defun js-chart (id)
  `(new (*chart
         ;; ctx
         (chain
          document (get-element-by-id ,id) (get-context "2d"))
         ;; data
         (create
          type "bar"
          data (create
                labels '("Red" "Blue")
                datasets `(,(create
                             label "# of Votes"
                             data '(12 19 3)
                             background-color '("rgba(255, 99, 132, 0.2)"
                                                "rgba(54, 162, 235, 0.2)")
                             border-color '("rgba(255,99,132,1)"
                                            "rgba(54, 162, 235, 1)")
                             border-width 1)))
          options (create
                   scales (create
                           yAxes `(,(create
                                     ticks (create
                                            begin-at-zero true)))))))))
(defun goods-js ()
  `(defun add-goods ()
     ,(jq-ajax
       "/test/chart"
       :suc `(progn
               (let ((target (@ data "target"))
                     (action (@ data "action"))
                     (content (@ data "content")))
                 ((getprop ($ target) action) content))
               ,(js-chart "ichart")))))

#+END_SRC
** Order
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun order-item (name item)
  (destructuring-bind (id num price) item
      `(li (:id ,id)
           (div (:class "info w-8")
                (span (:class "quantity")
                      ,(format nil "~A个" num))
                (span (:class "name")
                      ,(format nil "~A" name))
                (span (:class "remove" :onclick "delOrderItem(this)") "x"))
           (span (:class "n-price w-4")
                 ,(format nil "¥~,2f" price)))))

(defun order-htm ()
  (let ((ttp 0.00))
    `(div (:class "order left")
          (h1 (:class "title") "订单")
          (div (:class "header")
               (span (:class "quantity w-3") "数量")
               (span (:class "name w-6") "商品名")
               (span (:class "n-price w-3") "价格"))
          (ul (:class "list")
              ;; Item
              ,@(let ((order))
                  (maphash (lambda (k v)
                             (push (order-item k v) order)
                             (incf ttp (third v)))
                           ,*mk-order*)
                  order))
          (div (:class "footer")
               "总价"
               (span (:class "total-price right")
                     ,(format nil "¥~,2f" ttp))))))

;; (let ((order))
;;   (maphash (lambda (k v)
;;              (push (format nil "~A ~f" k v)
;;                    order))
;;            *mk-order*)
;;   order)

#+END_SRC
*** Css
#+BEGIN_SRC lisp :tangle yes
(defun order-css ()
  '(".order" (:padding "10px"
              :height "100%"
              :border "1px solid"
              :overflow "scroll"
              :width "30%")
    (".title" (:font-size "20px"
               :text-align "center"
               :margin-bottom "20px"))
    (".header" (:border-bottom "1px solid"
                :height "20px")
     (".name" (:text-align "center")))
    (".n-price" (:text-align "right"))
    (".list" ()
     ("li" (:clear "both"
                   :height "50px"
                   :border-bottom "1px dashed"
                   :position "relative"
                   :display "flex"
                   :align-items "center")
      (".quantity" (:margin-right "10px"))
      (".remove" (:display "none" :cursor "pointer")))
     ("li:hover" ()
      (".remove" (:display "inline-block" :color "red"))))
    (".footer" (:clear "both"
                :margin-top "5px"
                :border-top "1px solid"))))
#+END_SRC
*** Js
#+BEGIN_SRC lisp :tangle yes
(defun order-js ()
  '(defun del-order-item (obj)
    (jq-ajax "/order/del"
     (create 
      :goods-name (chain 
                   ($ obj) (parent) (children ".name")
                   (text))))))

#+END_SRC
** Inventory
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun inventory-htm ()
  `(div (:class "inventory left")
        (h1 (:class "title") "库存")
        (ul (:class "list")
            ;; Edit Input
            (input (:class "edit"
                           :type "text"
                           :id "edit"
                           :placeholder "???"))
            ;; Items
            ,@(loop for i from 0 below (length *mk-inventory*)
                 collect
                   (destructuring-bind (name num price rcd il) (aref *mk-inventory* i)
                     `(li (:class "table")
                          (div (:class "row")
                               (span (:class "name col w-6")
                                     ,(format nil "~A" name))
                               (span (:class "quantity col w-2")
                                     ,(format nil "~A个" num))
                               (span (:class "price col w-2")
                                     ,(format nil "¥~A" price))
                               (span (:class "col w-2")
                                     (select (:class "status"
                                                     :id "status" :name "status")
                                       (option (:value "fresh") "有存货")
                                       (option (:value "out") "卖完"))))
                          (div (:class "recommend row")
                               ,(format nil "~A" rcd))
                          (div (:class "img-link row")
                               ,(format nil "~A" il))
                          (div (:class "remove row")
                               (span () "移除"))))))))
#+END_SRC

*** Css
#+BEGIN_SRC lisp :tangle yes
(defun inventory-css ()
  '(".inventory" (:border "1px solid"
                  :height "100%"
                  :padding "10px"
                  :overflow "scroll"
                  :width "35%")
    (".title" (:font-size "20px"
               :text-align "center"
               :margin-bottom "20px"))
    (".list" ()
     (".edit" (:display "none"))
     (".editing" (:display "block"))
     (".table" (:margin "10px 0"
                        :border "1px solid"
                        :height "120px")
      (".row" (:border-bottom "1px solid"
                              :height "20px")
              (".col" (:border-right "1px solid"))
              ;; (".name" (:border-right "1px solid"))
              ;; (".quantity" (:border-right "1px solid"))
              ;; (".price" (:border-right "1px solid"))
              )
      (".recommend" (:height "50px" :padding "2px"))
      (".img-link" (:height "30px" :padding "0 2px"
                            :display "flex" :align-items "center" ))
      (".remove" (:text-align "center"
                              :cursor "pointer"))
      (".remove:hover" (:text-decoration "underline"))))))

#+END_SRC
*** Js
#+BEGIN_SRC lisp :tangle yes
(defun inventory-js ())

#+END_SRC
