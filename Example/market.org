#+TITLE: Market
#+AUTHOR: Xt3

* Source
- surface from: [[https://reactforbeginners.com][https://reactforbeginners.com]]

* Load
#+BEGIN_SRC lisp

(ql:quickload '( ;; Web Framework
                :ningle :lack :clack
                ;; Websocket
                :websocket-driver
                ;; JS
                :parenscript
                ;; JSON
                :jonathan
                ;; Parse Real Number
                :parse-number)
              :silent t)

;; Helper
(load "base")

(load "market")
(mk:start :port 3000)
(mk:stop)

(in-package :mk)
(defun re-mk ()
  (if mk::*handler*
      (mk:stop))
  (load "market")
  (mk:start :port 3000))
#+END_SRC
* Base
** Package
#+BEGIN_SRC lisp :tangle yes
(in-package :cl-user)
(defpackage market
  (:use :cl 
        :ningle 
        :xt3.web.base
        :parse-number
        :websocket-driver)
  (:nicknames :mk)
  (:import-from :lack.builder
                :builder)
  (:import-from :lack.response
                :response-headers
                :response-body
                :response-status
                :finalize-response)
  (:import-from :parenscript
                :ps
                :ps*
                :chain
                :create
                :new
                :var
                :@
                :getprop)
  (:import-from :jonathan
                :to-json)
  (:export :start
           :stop))
(in-package :market)

#+END_SRC
** App
#+BEGIN_SRC lisp :tangle yes
;; APP 
(defparameter *error-log* *standard-output*)
(defparameter *app* (make-instance '<app>))
(defvar *handler* nil)

(defun start (&rest args &key server port debug &allow-other-keys)
  (declare (ignore server port debug))
  (when *handler*
    (restart-case (error "Server is already running.")
      (restart-server ()
        :report "Restart the server"
        (stop))))
  (setf *handler*
        ;; (apply #'clack:clackup *app* args)
        (apply #'clack:clackup
               (builder
                (:static
                 :path (lambda (path)
                         (if (ppcre:scan "^(?:/images/|/css/|/js/|/robot\\.txt$|/favicon\\.ico$)" path)
                             path
                             nil))
                 :root #P"static/") 
                ,*app*)
               args)))

(defun stop ()
  (prog1
      (clack:stop *handler*)
    (setf *handler* nil)))

#+END_SRC
** WebSocket
#+BEGIN_SRC lisp :tangle yes
(defparameter *ws* nil)

(defvar *ws-server*
  (lambda (env)
    (setf *ws* (make-server env))
    (on :message *ws*
        (lambda (message)
          (send *ws* (format nil "[Server] ~A" message))))
    (lambda (responder)
      (declare (ignore responder))
      (start-connection *ws*))))

(defvar *ws-handler* nil)
(defun ws-start ()
  (setf *ws-handler* (clack:clackup *ws-server* :port 5000)))

(defun ws-stop ()
  (prog1
      (clack:stop *ws-handler*)
    (setf *ws-handler* nil)
    (setf *ws* nil)))
#+END_SRC
* Arc
** COMMENT Layout (Outdated)
- 1 Page = 3 column
  - Goods = 35%
    - Maket-Logo|Title (Fixed)
    - Lists (Scroll)
      - Li = 2 column
        - Goods-img : [Img]  = 30%
        - 3 row = 70% 
          - 1r
            - Goods-name (L)
            - Goods-price (R)
          - Goods-Recommend
          - Goods-status : [Add-to-Oreder | Sold-out(?:Img)]
  - Order = 30%
    - Title : "YOUR OREDER"
    - Lists (Scroll)
      - Li = L&R (Hover->Action:"Remove")
        - Order-goods-quantity Order-goods-name
        - Order-goods-total
    - Footer = L&R
      - "Total"
      - Order-price-total
  - Inventory = 35%
    - Titele : "INVENTORY"
    - Lists (Scroll)
      - Li = Table(4r:(3c 1c 1c 1c))
        - 3c
          - -goods-name
          - -total-quantity
          - -goods-status : ["Fresh!" | "Sold Out!"]
        - -goods-recommend
        - -goods-img : [Link]
        - Action : "Remove"
   
** COMMENT Status & Rel
- Rel
  - Goods.-status -click:addGoods()->
    - Oreder Item
      - Order.-quantity
      - Order.-n-price
    - Order.-total-price
    - Inventory.-quantity
    - Inventory.-status
  - Inventory Table -Edit()->
    - -img-link -> Goods.-img
    - -recommend -> Goods.-recommend
    - -status -> Goods.-status
    - -name -> Goods.-name
- Status
  - Goods.status : [Add-to-Oreder | Sold-out(?:Img)] = F|T
* Model
** Helper
#+BEGIN_SRC lisp :tangle yes
;; Redundancy Count
(defparameter *rdd-count* 0)
#+END_SRC
** Inventory
*** Helper
#+BEGIN_SRC lisp :tangle yes
;; Sold out | Fresh
(defun sold-out (i &key reverse)
  (if reverse
      (list :tag (concat ".goods .list li:nth-child(" (+ i 1) ") .status")
            :mes `((:act "text" :con "订购")
                   (:act "removeClass" :con "disabled")))
      (list :tag (concat ".goods .list li:nth-child(" (+ i 1) ") .status")
            :mes `((:act "text" :con "卖完")
                   (:act "addClass" :con "disabled")))))
#+END_SRC
*** Base
#+BEGIN_SRC lisp :tangle yes
;; Inventory
(defclass inventory ()
  ((tag :initform ".inventory .table"
        :reader get-tag
        :allocation :class)
   (tables :initform (make-array 0 :fill-pointer t :adjustable t)
           :initarg :tables
           :accessor tables)))

;; Inventory table
(defclass inventory-table ()
  ((tag :initform ".inventory .list .table:nth-child(~D)"
        :reader tag
        :allocation :class)
   (inventory :accessor inventory)
   (name :initform (format nil "商品-~D~3,'0D" (get-universal-time) (incf *rdd-count*))
         :initarg :name
         :accessor name)
   (quantity :initform 10
             :initarg :quantity
             :accessor quantity)
   (price :initform 1.00
          :initarg :price
          :accessor price)
   (recommend :initform "推荐"
              :initarg :recommend
              :accessor recommend)
   (img-link :initform "#"
             :initarg :il
             :accessor il)
   (status :initform "out"
           :initarg :stat
           :accessor stat)))

(defmethod get-tag ((table inventory-table))
  (let ((i (index-by-name (inventory table) (name table))))
    (if i
        (format nil (tag table) (1+ i))
        "ERROR")))
#+END_SRC
*** Tables
#+BEGIN_SRC lisp :tangle yes
;; index of table
(defmethod index-of ((inventory inventory) (table inventory-table))
  (position table (tables inventory)))

;; find table by index
(defmethod table-by-index ((inventory inventory) (index integer))
  (aref (tables inventory) index))

;; find index of table by name
(defmethod index-by-name ((inventory inventory) (name string))
  (position name (tables inventory) :key #'name :test #'equal))

;; add table
(defmethod add-table ((inventory inventory) (table inventory-table))
  (vector-push-extend table (tables inventory))
  (setf (inventory table) inventory))

;; remove table by index
(defmethod rm-table-by-index ((inventory inventory) (table inventory-table) (index integer))
  (let* ((tables (tables inventory))
         (result (remove (aref tables index) tables))
         (dem (array-dimensions result)))
    (setf (tables inventory)
          (make-array dem :displaced-to result :fill-pointer t :adjustable t))))

;; clear tables
(defmethod clear-tables ((inventory inventory))
  (setf (tables inventory)
        (make-array 0 :fill-pointer t :adjustable t)))

#+END_SRC
*** Status
#+BEGIN_SRC lisp :tangle yes
(defmethod change-status ((table inventory-table) (stat string))
  (let ((i (index-of (inventory table) table))
        (nstat "out")
        (ins ()))
    (cond ((string= stat "out")
           (push (sold-out i) ins))
          ((and (string= stat "fresh")
                (> (quantity table) 0))
           (setf nstat "fresh")
           (push (sold-out i :reverse t) ins))
          (t))
    (setf (stat table) nstat)
    (push (list :tag (concat (get-tag table) " #status")
                :mes `((:act "val" :con ,nstat)))
          ins)
    ins))
#+END_SRC
*** Quantity
#+BEGIN_SRC lisp :tangle yes
(defmethod add-quantity ((table inventory-table) (num integer))
  (let ((ins ()))
    (when (> (quantity table) 0)
      ;; Inventory.quantity
      (incf (quantity table) num)
      (push (list :tag (concat (get-tag table) " .quantity")
                  :mes `((:act "val" :con ,(concat (quantity table) "个"))))
            ins)
      ;; Status
      (when (= (quantity table) 0)
        (setf ins (nconc (change-status table "out") ins)))
      ins)))

#+END_SRC
** Order
*** Base
#+BEGIN_SRC lisp :tangle yes
;; Order
(defclass order ()
  ((tag :initform ".order .list"
        :reader get-tag
        :allocation :class)
   (items :initform (make-hash-table :test #'equal)
          :initarg :items
          :accessor items)
   (price :initform 0
          :initarg :price
          :accessor price)))

;; Order Item
(defclass order-item ()
  ((tag :initform ".order .list"
        :reader tag
        :allocation :class)
   (id :initform (format nil "~D~3,'0D" (get-universal-time) (incf *rdd-count*))
       :initarg :id
       :reader id)
   (quantity :initform 1
             :initarg :quantity
             :accessor quantity)
   (price :initform 0.00
           :initarg :price
           :accessor price)))

;; Tag
(defmethod get-tag ((item order-item))
  (concat (tag item) " #" (id item)))

;; Items
(defmethod item-by-name ((order order) (name string))
  (gethash name (items order)))

#+END_SRC
*** Price
#+BEGIN_SRC lisp :tangle yes
;; Total-price
(defmethod add-price ((order order) (price number))
  (incf (price order) price)
  (list :tag ".order .total-price"
        :mes `((:act "text" :con ,(format nil "¥~,2f" (price order))))))
#+END_SRC
*** Item
#+BEGIN_SRC lisp :tangle yes
(defmethod htm ((item order-item) (name string))
  (->html (order-item-htm name item)))

(defmethod add-item ((order order) (name string) item (table inventory-table))
  ;; Succ -> ins | Fail -> nil
  ;; inventory table exist?
  (let ((price (price table))
        (items (items order))
        (ins ()))
    ;; Inventory Quantity
    (setf ins (append (add-quantity table -1) ins))
    ;; Order Item
    (if item
        (progn
          (incf (quantity item))
          (incf (price item) price)
          (setf (gethash name items) item)
          (push (list :tag (get-tag item)
                      :mes `((:act "replaceWith" :con ,(htm item name))))
                ins))
        (progn
          (setf item (make-instance 'order-item))
          (incf (price item) price)
          (setf (gethash name items) item)
          (push (list :tag (get-tag order)
                      :mes `((:act "prepend" :con ,(htm item name))))
                ins)))
    ;; Order Total-price
    (push (add-price order price) ins)
    ins))

#+END_SRC

* DB
#+BEGIN_SRC lisp :tangle yes
;;; Market
;; Inventory-table = name quantity price recommend img-link status
;; Order-items = name : (id quantity price*num)

(defparameter *order* (make-instance 'order))
(defparameter *inventory* (make-instance 'inventory))

;; Initial
(loop for i from 0 to 10 do
     (add-table *inventory* (make-instance 'inventory-table)))
#+END_SRC

* Router
** Base
#+BEGIN_SRC lisp :tangle yes
;; Router
#+END_SRC
*** Helper
#+BEGIN_SRC lisp :tangle yes
;; Router
(defmacro route-> (method path body)
  `(setf (route *app* ,path :method ,method)
         ,body))

;; JSON
(defun <-json (plist)
  (setf (getf (response-headers *response*) :content-type)
                "application/json")
  (to-json plist))


#+END_SRC

** /
#+BEGIN_SRC lisp :tangle yes
;; GET /
(route-> :GET "/" 
         #'(lambda (params)
             (declare (ignore params))
             (index ())))
#+END_SRC
** /order
*** COMMENT Add
#+BEGIN_SRC lisp :tangle yes
POST /order/add
(route->
    :POST "/order/add" 
    #'(lambda (params)
        (let* ((name (cdr (assoc "goods-name" params :test #'string=)))
               (i (index-by-name *inventory* name))
               (ins ()))
          (or (and i
                   (setf ins (add-item *order*
                                       name
                                       (item-by-name *order* name)
                                       (table-by-index *inventory* i)))
                   ;; <-JSON
                   (<-json (list :ins ins)))
              ;; Error
              "ERROR!"))))

#+END_SRC

*** Add (:WebSocket)
#+BEGIN_SRC lisp :tangle yes
;; POST /order/add
(route->
    :POST "/order/add" 
    #'(lambda (params)
        (let* ((name (cdr (assoc "goods-name" params :test #'string=)))
               (i (index-by-name *inventory* name))
               (ins ()))
          (or (and i
                   (setf ins (add-item *order*
                                       name
                                       (item-by-name *order* name)
                                       (table-by-index *inventory* i)))
                   ;; Ws
                   (progn
                     (send *ws* (to-json (list :msg "add" :ins ins)))
                     "Successful"))
              ;; Error
              "ERROR!"))))

#+END_SRC


*** COMMENT Del
#+BEGIN_SRC lisp :tangle yes
;; POST /order/del
(route->
    :POST "/order/del" 
    #'(lambda (params)
        (let* ((name (cdr (assoc "goods-name" params :test #'string=)))
               (item (gethash name *mk-order*))
               (i (position name *mk-inventory* :key #'first :test #'equal))
               num
               (ins ()))
          (or (and item
                   (if i
                       (and (setf num (second (aref *mk-inventory* i)))
                            (if (= num 0)
                                (progn
                                  ;; change-status
                                  (setf (sixth (aref *mk-inventory* i)) "fresh")
                                  (push (list :tag (concat ".inventory .list .table:nth-child(" (+ i 1) ") #status")
                                              :mes `((:act "val" :con "fresh")))
                                        ins)
                                  (push (sold-out i :reverse t) ins))
                                t)
                            ;; change-quantity
                            (setf (second (aref *mk-inventory* i)) (incf num (second item)))
                            (push (list :tag (concat ".inventory .list .table:nth-child(" (+ i 1) ") .quantity")
                                        :mes `((:act "val" :con ,(concat num "个"))))
                                  ins))
                       t)
                   ;; Change: Total-price
                   (decf *mk-order-ttp* (third item))
                   (push (list :tag ".order .total-price"
                               :mes `((:act "text" :con ,(format nil "¥~,2f" *mk-order-ttp*))))
                         ins)
                   ;; Remove Item
                   (remhash name *mk-order*)
                   (push (list :tag (concat ".order #" (first item))
                               :mes `((:act "remove" :con :null)))
                         ins)
                   ;; <-JSON
                   (<-json (list :ins ins)))
              ;; Error
              "ERROR!"))))
#+END_SRC

** /inventory
*** COMMENT Edited 
#+BEGIN_SRC lisp :tangle yes
;; POST /inventory/edited
(route->
    :POST "/inventory/edited" 
    #'(lambda (params)
        (let* ((i (parse-integer (cdr (assoc "index" params :test #'string=))))
               (id (cdr (assoc "id" params :test #'string=)))
               (val (cdr (assoc "new-val" params :test #'string=)))
               table;; (name quantity price recommend img-link status)
               (ins ()))
          (or (and (and i (>= i 0))
                   (setf table (aref *mk-inventory* i))
                   (case (position id '("name" "quantity" "price" "recommend" "img-link") :test #'equal)
                     (0 (setf ins (nconc (change-name val table i) ins)))
                     (1 (setf ins (nconc (change-quantity val table i) ins)))
                     (2 (setf ins (nconc (change-price val table i) ins)))
                     (3 (setf ins (nconc (change-recommend val table i) ins)))
                     (4 (setf ins (nconc (change-img-link val table i) ins)))
                     (t nil))
                   ;; <-JSON
                   ;; (format nil "~A" ins)
                   (<-json (list :ins ins)))
              ;; Error
              "ERROR!"))))


(defun change-name (new-name table i)
  (let* ((ins ())
         (name (nth 0 table))
         (item (gethash name *mk-order*)))
    (when item
      (push (list :tag (concat ".order #" (first item) " .name")
                  :mes `((:act "text" :con ,new-name)))
            ins)
      (setf (gethash new-name *mk-order*) item)
      (remhash name *mk-order*))
    (setf (nth 0 table) new-name)
    (push (list :tag (concat ".inventory .list .table:nth-child(" (+ i 1) ") #name")
                :mes `((:act "val" :con ,new-name)))
          ins)
    (push (list :tag (concat ".goods .list li:nth-child(" (+ i 1) ") .name")
                :mes `((:act "text" :con ,new-name)))
          ins)
    ins))


(defun change-quantity (new-num table i)
  (let ((ins ())
        (num (parse-integer (if (equal new-num "")
                                "0"
                                new-num)
                            :junk-allowed t))
        (old-num (nth 1 table)))
    (when (>= num 0)
      (setf (nth 1 table) num)
      (push (list :tag (concat ".inventory .list .table:nth-child(" (+ i 1) ") #quantity")
                  :mes `((:act "val" :con ,(concat num "个"))))
            ins)
      ;; (when (= 0 old-num)
      ;;   (setf (sixth (aref *mk-inventory* i)) "fresh")
      ;;   (push (sold-out i :reverse t) ins))
      (when (= 0 num)
        ;; change-status
        (setf (sixth (aref *mk-inventory* i)) "out")
        (push (list :tag (concat ".inventory .list .table:nth-child(" (+ i 1) ") #status")
                  :mes `((:act "val" :con "out")))
              ins)
        (push (sold-out i) ins))
      ins)))

(defun change-price (new-price table i)
  (let ((num (parse-real-number (string-trim "¥" (if (equal new-price "")
                                                     "0.00"
                                                     new-price)))))
    (when (>= num 0)
      (setf (nth 2 table) num)
      (list (list :tag (concat ".inventory .list .table:nth-child(" (+ i 1) ") #price")
                  :mes `((:act "val" :con ,(concat "¥" num))))
            (list :tag (concat ".goods .list li:nth-child(" (+ i 1) ") .price")
                  :mes `((:act "text" :con ,(concat "¥" num))))))))

(defun change-recommend (new-rcd table i)
  (setf (nth 3 table) new-rcd)
  (list (list :tag (concat ".inventory .list .table:nth-child(" (+ i 1) ") #recommend")
              :mes `((:act "val" :con ,new-rcd)))
        (list :tag (concat ".goods .list li:nth-child(" (+ i 1) ") .recommend")
                :mes `((:act "text" :con ,new-rcd)))))

(defun change-img-link (new-link table i)
  (setf (nth 4 table) new-link)
  (list (list :tag (concat ".inventory .list .table:nth-child(" (+ i 1) ") #img-link")
              :mes `((:act "val" :con ,new-link)))
        (list :tag (concat ".goods .list li:nth-child(" (+ i 1) ") .img")
              :mes `((:act "attr" :con (:src ,new-link))))))



#+END_SRC

*** Status
#+BEGIN_SRC lisp :tangle yes
;; POST /inventory/status
(route->
    :POST "/inventory/status" 
    #'(lambda (params)
        (let* ((i (parse-integer (cdr (assoc "index" params :test #'string=))))
               (val (cdr (assoc "val" params :test #'string=)))
               (ins ()))
          (or (and (and i (>= i 0))
                   (setf ins (nconc (change-status (table-by-index *inventory* i)
                                                   val)
                                    ins))
                   ;; <-JSON
                   (<-json (list :ins ins)))
              ;; Error
              "ERROR!"))))



#+END_SRC

*** COMMENT Add
#+BEGIN_SRC lisp :tangle yes
;; POST /inventory/add
(route->
    :POST "/inventory/add" 
    #'(lambda (params)
        (let ((item (list (concat "商品-" (format nil "~D~3,'0D" (get-universal-time) (incf *rdd-count*)))
                          0 0.00 "推荐" "#" "out")))
          (vector-push-extend item *mk-inventory*)
          (<-json (list :ins (list (list :tag (concat ".inventory .list")
                                         :mes `((:act "append" :con ,(->html (inventory-item item)))))
                                   (list :tag (concat ".goods .list")
                                         :mes `((:act "append" :con ,(->html (goods-item item)))))))))))
#+END_SRC

*** COMMENT Del
#+BEGIN_SRC lisp :tangle yes
;; POST /inventory/del
(route->
    :POST "/inventory/del" 
    #'(lambda (params)
        (let* ((i (parse-integer (cdr (assoc "index" params :test #'string=))))
               (val (cdr (assoc "val" params :test #'string=)))
               table ;; (name quantity price recommend img-link)
               (ins ()))
          (or (and (and i (>= i 0))
                   (setf *mk-inventory* (del-array-by-index *mk-inventory* i))
                   (push (change-status val (second table) i) ins)
                   ;; <-JSON
                   (<-json (list :ins (list (list :tag (concat ".inventory .list .table:nth-child(" (+ i 1) ")")
                                                  :mes `((:act "remove" :con :null)))
                                            (list :tag (concat ".goods .list li:nth-child(" (+ i 1) ")")
                                                  :mes `((:act "remove" :con :null)))))))
              ;; Error
              "ERROR!"))))

(defun del-array-by-index (array i)
  (let* ((na (remove (aref array i) array))
         (d (array-dimensions na)))
    (make-array d
                :displaced-to na
                :fill-pointer t
                :adjustable t)))
#+END_SRC

* View
** Base
*** Helper
#+BEGIN_SRC lisp :tangle yes
;; CSS
(defun x-browser (att val &optional (browser '("webkit" "moz" "ms")))
  (nconc (let ((ls))
           (loop for i in browser
              do (progn (push (make-keyword (format nil "-~A-~A" i att)) ls)
                        (push val ls)))
           (nreverse ls))
         (list (make-keyword att) val)))

;; JS
(defun jq-ajax (url &key (type "post") (data "") suc
                      (err '(alert (@ jqXHR response-text))))
  `(chain
    $
    (ajax (create
           url ,url
           type ,type
           data ,data
           success (lambda (data status)
                     (if (= status "success")
                         ,suc))
           error (lambda (jqXHR textStatus errorThrown)
                   ,err)))))


(defun jq-ins ()
  `(let ((ins (@ data "INS")))
     (chain
      ins
      (for-each (lambda (item)
                  (let ((target (@ item "TAG"))
                        (methods (@ item "MES")))
                    (chain
                     methods
                     (for-each (lambda (item)
                                 (let ((action (@ item "ACT"))
                                       (content (@ item "CON")))
                                   ((getprop ($ target) action) content)))))))))))
#+END_SRC
*** Layout
#+BEGIN_SRC lisp :tangle yes
(defun layout-template (args &key (title "标题") links head-rest content scripts)
  (declare (ignore args))
  `(,(doctype)
     (html (:lang "en")
           (head ()
                 (meta (:charset "utf-8"))
                 (meta (:name "viewport"
                              :content "width=device-width, initial-scale=1, shrink-to-fit=no"))
                 (meta (:name "description" :content "?"))
                 (meta (:name "author" :content "Xt3"))
                 (title nil ,title)
                 ,@links
                 ,@head-rest)
           (body ()
                 ,@content
                 ,@scripts))))

#+END_SRC
** Index
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun index (args)
  (->html
   (layout-template
    args
    :title (or (getf args :title) "我的市场")
    :links `()
    :head-rest
    `((style () ,(index-css)))
    :content
    `((div (:class "market")
           ,(goods-htm)
           ,(order-htm)
           ,(inventory-htm)))
    :scripts
    `(;;,(getf *web-links* :jq-js)
      (script (:src "js/jquery-3.2.1.min.js"))
      ;; (script (:src "js/Chart.bundle.min.js"))
      (script () ,(index-js))))))
#+END_SRC
*** Css
#+BEGIN_SRC lisp :tangle yes
(defun index-css ()
  (->css
   `((* (:margin 0 :padding 0
                 :box-sizing "border-box"
                 :outline "none"))
     (html (:height "100vh"))
     (body (:background "#f5f5f5" :font-size "14px"
                        :height "100%"
                        :padding "50px"))
     (a (:text-decoration "none"
                          :color "#bfbfbf"))
     ("a:hover" (:text-decoration "underline"
                                  :color "#000"))
     ("::-webkit-input-placeholder" (:color "#e6e6e6"
                                            :font-style "italic"))
     ("input" (:border "none"
                       :font-size "14px"
                       :padding "1px 2px 1px 5px"))
     
     ("ul" (:list-style "none"))
     
     ;; Float
     (".left" (:float "left"))
     (".right" (:float "right"))
     
     ;; Gird
     ;; ,@(loop for i from 1 to 12
     ;;      collect
     ;;        `(,(format nil ".w-~a" i)
     ;;           (:width ,(format nil "calc(~a*100%/12)" i)
     ;;                   :float "left")))
     ;; (".w-1" (:width "calc(1*100%/12)" :float "left")) ...

     ,@(loop for i from 1 to 12
        collect
          `(,(format nil ".w-~a" i)
             (:width ,(format nil "~D%" (round (* 100 (/ i 12))))
                     :float "left")))
     ;; (".w-1" (:WIDTH "8%" :FLOAT "left"))
     
     ;; Disabled
     (".disabled" (:pointer-events "none"))

     
     ;; Market
     (".market" (:background "white" :border "2px solid black"
                             :height "100%"))
     ,(goods-css)
     ,(order-css)
     ,(inventory-css))))
#+END_SRC
*** COMMENT Js
#+BEGIN_SRC lisp :tangle yes
(defun index-js ()
  (concat
   (ps*
    ;; jQuery Instruction
    `(defun jq-ins (data) ,(jq-ins))
    ;; Ajax
    `(defun jq-ajax (url data)
       ,(jq-ajax 'url
                 :data 'data
                 :suc '(jq-ins data)))
    ;; Content
    (goods-js)
    (order-js))
   (inventory-js)))
#+END_SRC

*** Js
#+BEGIN_SRC lisp :tangle yes
(defun index-js ()
  (concat
   (ps*
    ;; Websocket
    `(var ws null)
    `(defun ws-start ()
       (setf ws (new (*web-socket "ws://localhost:5000/")))
       (setf (@ ws onopen) (lambda (e)
                             (chain console (log "Connection open..."))))
       (setf (@ ws onmessage) (lambda (e)
                                ;; (chain console (log (+ "Mes: " (@ json "MSG"))))
                                (var json (chain |json| (parse (@ e data))))
                                (var ins (@ json "INS"))
                                (case (@ json "MSG")
                                  ("add" (jq-ins json))
                                  (t ins))))
       (setf (@ ws onclose) (lambda (e)
                              (chain console (log "Connection closed")))))
    `(ws-start)
    ;; jQuery Instruction
    `(defun jq-ins (data) ,(jq-ins))
    ;; Ajax
    `(defun jq-ajax (url data)
       ,(jq-ajax 'url
                 :data 'data
                 :suc '(jq-ins data)))
    ;; Content
    (goods-js)
    (order-js))
   (inventory-js)))



#+END_SRC
** -----
** Goods
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun goods-htm ()
  `(div (:class "goods left")
        (h1 (:class "title") "市场")
        (ul (:class "list")
            ;; Items
            ,@(map 'list
                   #'goods-item-htm
                   (tables *inventory*)))))

(defun goods-item-htm (item)
  (with-slots (name price recommend img-link status) item
    `(li ()
         (img (:class "img w-4" :src ,img-link :alt "Goods"))
         (div (:class "content w-8")
              (span (:class "name left")
                    ,(format nil "~A" name))
              (span (:class "price right")
                    ,(format nil "¥~A" price))
              (p (:class "recommend")
                 ,(format nil "~A" recommend))
              (span (:class ,(concat "status" (if (equal status "out") " disabled" ""))
                            :onclick "addOrderItem(this)")
                    ,(if (equal status "out") "卖完" "订购"))))))

#+END_SRC

*** Css
#+BEGIN_SRC lisp :tangle yes
(defun goods-css ()
  '(".goods" (:border "1px solid"
              :height "100%"
              :overflow "scroll"
              :width "35%")
    (".title" (:font-size "50px"
               :font-weight "100"
               :border-bottom "1px solid"
               :margin "0px 10px"
               :text-align "center"
               :height "100px"))
    (".list" (:margin "0 10px")
     ("li" (:border-top "1px solid"
                        :border-bottom "1px solid"
                        :margin "2px 0"
                        :min-height "100px")
      ("img" (:border "1px dashed"
                      :margin "3px 0"
                      :height "90px"))
      (".content" (:padding "3px")
                  (".recommend" (:clear "both"))
                  (".status" (:border "1px solid orange"
                                      :border-radius "4px"
                                      :color "orange"
                                      :cursor "pointer"
                                      :padding "2px"))
                  (".status:hover" (:background "orange"
                                                :color "white")))))))
#+END_SRC
*** COMMENT Js
#+BEGIN_SRC lisp :tangle yes
(defun goods-js ()
  '(defun add-order-item (obj)
    (jq-ajax "/order/add"
     (create 
      :goods-name (chain 
                   ($ obj) (parent) (children ".name")
                   (text))))))
#+END_SRC
*** Js (:WebSocket)
#+BEGIN_SRC lisp :tangle yes
(defun goods-js ()
  `(defun add-order-item (obj)
     ,(jq-ajax "/order/add"
               :data '(create
                       :goods-name (chain
                                       ($ obj) (parent) (children ".name")
                                       (text)))
               :suc '(progn
                      (chain ($ obj) (blur))))))
#+END_SRC


** Order
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun order-htm ()
  (let ((ttp 0.00))
    `(div (:class "order left")
          (h1 (:class "title") "订单")
          (div (:class "header")
               (span (:class "quantity w-3") "数量")
               (span (:class "name w-6") "商品名")
               (span (:class "n-price w-3") "价格"))
          (ul (:class "list")
              ;; Item
              ,@(let ((order))
                  (maphash (lambda (k v)
                             (push (order-item-htm k v) order)
                             (incf ttp (price v)))
                           (items *order*))
                  (setf (price *order*) ttp)
                  order))
          (div (:class "footer")
               "总价"
               (span (:class "total-price right")
                     ,(format nil "¥~,2f" ttp))))))

(defun order-item-htm (name item)
  (with-slots (id quantity price) item
      `(li (:id ,id)
           (span (:class "quantity w-3")
                 ,(format nil "~A个" quantity))
           (span (:class "name w-5")
                 ,(format nil "~A" name))
           (span (:class "remove w-1" :onclick "delOrderItem(this)") "x")
           (span (:class "n-price")
                 ,(format nil "¥~,2f" price)))))

#+END_SRC
*** Css
#+BEGIN_SRC lisp :tangle yes
(defun order-css ()
  '(".order" (:padding "10px"
              :height "100%"
              :border "1px solid"
              :overflow "scroll"
              :width "30%")
    (".title" (:font-size "20px"
               :text-align "center"
               :margin-bottom "20px"))
    (".header" (:border-bottom "1px solid"
                :height "20px")
     (".name" (:text-align "center")))
    (".n-price" (:text-align "right"))
    (".list" ()
     ("li" (:clear "both"
                   :height "50px"
                   :border-bottom "1px dashed"
                   :position "relative"
                   :display "flex"
                   :align-items "center")
      (".name" (:text-align "center"))
      (".quantity" (:margin-right "10px"))
      (".remove" (:display "none" :cursor "pointer"))
      (".n-price" (:position "absolute"
                             :right 0)))
     ("li:hover" ()
      (".remove" (:display "inline-block" :color "red"))))
    (".footer" (:clear "both"
                :margin-top "5px"
                :border-top "1px solid"))))
#+END_SRC
*** Js
#+BEGIN_SRC lisp :tangle yes
(defun order-js ()
  '(defun del-order-item (obj)
    (jq-ajax "/order/del"
     (create 
      :goods-name (chain 
                   ($ obj) (parent) (children ".name")
                   (text))))))

#+END_SRC
** Inventory
*** Htm
#+BEGIN_SRC lisp :tangle yes
(defun inventory-htm ()
  `(div (:class "inventory left")
        (h1 (:class "title") "库存")
        (div (:class "toolbar")
             (span (:class "add" :onclick "addInventory()") "添加"))
        (ul (:class "list" :onclick "editing(event)" :onkeyup "edited(event)")
            ;; Items
            ,@(map 'list
                   #'inventory-table-htm 
                   (tables *inventory*)))))


(defun inventory-table-htm (item)
  (with-slots (name quantity price recommend img-link status) item
    `(li (:class "table")
         (input (:class "name row w-6" :id "name"
                        :type "text" :placeholder "???" :value ,name
                        :onblur "editCancel()"))
         (div (:class "row")
              (input (:class "quantity col w-4" :id "quantity"
                             :type "text" :placeholder "???" :value ,(format nil "~A个" quantity)
                             :onblur "editCancel()"))
              (input (:class "price col w-4" :id "price"
                             :type "text" :placeholder "???" :value ,(format nil "¥~A" price)
                             :onblur "editCancel()"))
              (span (:class "col w-4")
                    (select (:class "status" :id "status" :name "status" :onchange "changeStatus(this)")
                      ,@(mapcar (lambda (val text)
                                  `(option ,(append (list :value val)
                                                    (if (equal status val)
                                                        '(:selected "selected")))
                                           ,text))
                                '("fresh" "out") '("有存货" "卖完")))))
         (textarea (:class "recommend row" :id "recommend"
                           :placeholder "???"
                           :onblur "editCancel()")
                   ,recommend)
         (input (:class "img-link row" :id "img-link"
                        :type "text" :placeholder "???" :value ,img-link
                        :onblur "editCancel()"))
         (div (:class "remove row")
              (span (:onclick "remInventory(this)") "移除")))))

#+END_SRC

*** Css
#+BEGIN_SRC lisp :tangle yes
(defun inventory-css ()
  '(".inventory" (:border "1px solid"
                  :height "100%"
                  :padding "10px"
                  :overflow "scroll"
                  :width "35%")
    (".title" (:font-size "20px"
               :text-align "center"
               :margin-bottom "20px"))
    (".toolbar" (:border-top "1px solid"
                 :text-align "right")
     (".add:hover" (:text-decoration "underline"
                                     :cursor "pointer")))
    (".list" ()
     ("input.editing" (:background "#efcb3a"))
     (".editing" (:display "auto"))
     (".table" (:margin "10px 0"
                        :border "1px solid")
      (".row" (:border-bottom "1px solid"
                              :display "block"
                              :height "20px"
                              :width "100%"
                              :clear "both")
              (".col" (:border-left "1px solid"
                                    :height "100%")))
      ("#quantity" (:border-left "none" :text-align "right"))
      ("#price" (:text-align "right"))
      ("#status" (:border "none"
                          :width "100%" :height "100%"
                          :background "none"
                          :font-size "1em"))
      (".recommend" (:height "70px" :padding "2px" :border "none" :border-bottom "1px solid"))
      ;; (".img-link" ())
      (".remove" (:text-align "center" :border "none"
                              :cursor "pointer"))
      (".remove:hover" (:text-decoration "underline"))))))

#+END_SRC
*** Js
#+BEGIN_SRC lisp :tangle yes
(defun inventory-js ()
  (ps*
   `(defun add-inventory (obj)
      (jq-ajax "/inventory/add" nil))
   
   `(defun rem-inventory (obj)
      (jq-ajax "/inventory/del"
               (create
                :index (chain ($ ".table")
                              (index (chain ($ obj)
                                            (parents ".table")))))))
   
   '(var cur-edit (create
                   obj nil
                   val ""))
   
   `(defun editing (e)
      ;; (chain console (log obj))
      (var obj (@ e target))
      (unless (chain ($ obj) (has-class "editing"))
        ;; (edit-cancel)
        (setf (@ cur-edit obj) obj
              (@ cur-edit val) (chain ($ obj) (val)))
        (chain ($ obj) (toggle-class "editing"))))

   `(defun edited (e)
      ;; (chain console (log "edited"))
      ;; (chain console (log e))

      (var obj (@ e target))
      (case (@ e key-code)
        (27 ;; "Escape"
         ;; (edit-cancel)
         (chain ($ obj) (blur)))
        (13 ;; "Enter"
         ;; (chain console (log "Enter"))
         ,(jq-ajax "/inventory/edited"
                   :data '(create
                           :index (chain ($ ".table")
                                   (index (chain ($ obj)
                                                 (parents ".table"))))
                           :id (chain ($ obj) (attr "id"))
                           :new-val (chain ($ obj) (val)))
                   :suc '(progn
                          (chain ($ obj) (blur))
                          (jq-ins data))))
        (t nil)))
   
   `(defun edit-cancel ()
      ;; (chain console (log "cancel"))
      ;; (chain window event (stop-propagation))
      
      (chain
       ($ (@ cur-edit obj))
       (val (@ cur-edit val))
       (remove-class "editing"))
      (setf (@ cur-edit obj) nil
            (@ cur-edit val) ""))

   `(defun change-status (obj)
      (jq-ajax "/inventory/status"
               (create
                :index (chain ($ ".table")
                              (index (chain ($ obj)
                                            (parents ".table"))))
                :val (chain ($ obj) (val)))))))
#+END_SRC

